{"title":"数据结构","uid":"81579b6c641dedc829a2b0058112fc0c","slug":"数据结构","date":"2024-05-01T11:43:02.711Z","updated":"2024-05-01T11:42:43.673Z","comments":true,"path":"api/articles/数据结构.json","keywords":null,"cover":null,"content":"<h2 id=\"数据结构\"><a href=\"#数据结构\" class=\"headerlink\" title=\"数据结构\"></a>数据结构</h2><h3 id=\"1-数据结构包含线性表和非线性表两部分，其中：\"><a href=\"#1-数据结构包含线性表和非线性表两部分，其中：\" class=\"headerlink\" title=\"1 数据结构包含线性表和非线性表两部分，其中：\"></a>1 数据结构包含线性表和非线性表两部分，其中：</h3><h4 id=\"1-1-线性表包含以下几种常见的数据结构：\"><a href=\"#1-1-线性表包含以下几种常见的数据结构：\" class=\"headerlink\" title=\"1.1 线性表包含以下几种常见的数据结构：\"></a><strong>1.1 线性表包含以下几种常见的数据结构：</strong></h4><p>线性表（Linear List）是一种线性数据结构，它由一系列具有相同数据类型的元素组成，元素之间一对一地排列，形成一条直线。线性表中的元素可以通过位置（索引）来访问，而且元素的顺序是固定的。线性表的主要目的是提供一种方便的方式来存储和访问一系列元素。</p>\n<p>线性表包含以下几种常见的数据结构：</p>\n<ol>\n<li><strong>数组（Array）</strong>：<ul>\n<li>数组是一种固定大小的数据结构，它可以存储具有相同数据类型的元素。</li>\n<li>数组中的元素通过索引来访问，索引通常从0开始。</li>\n<li>数组的优点是访问元素的时间复杂度为O(1)，但它的缺点是大小固定，插入和删除操作可能需要移动其他元素。</li>\n</ul>\n</li>\n<li><strong>链表（Linked List）</strong>：<ul>\n<li>链表是由一系列节点组成的动态数据结构，每个节点包含数据部分和指向下一个节点的指针。</li>\n<li>链表的优点是大小动态，插入和删除操作相对高效，但访问特定元素的时间复杂度为O(n)。</li>\n<li>链表有多种形式，如单向链表、双向链表和循环链表。</li>\n</ul>\n</li>\n<li><strong>栈（Stack）</strong>：<ul>\n<li>栈是一种后进先出（LIFO）的数据结构，它允许在一端（栈顶）进行插入和删除操作。</li>\n<li>栈可以用于解决许多问题，如递归算法、括号匹配、逆序输出等。</li>\n</ul>\n</li>\n<li><strong>队列（Queue）</strong>：<ul>\n<li>队列是一种先进先出（FIFO）的数据结构，它允许在一端（队尾）进行插入操作，在另一端（队首）进行删除操作。</li>\n<li>队列常用于任务调度、缓冲处理等场景。</li>\n</ul>\n</li>\n<li><strong>向量（Vector）</strong>：<ul>\n<li>向量是数组的抽象，它是一种动态数组，可以根据需要自动调整大小。</li>\n<li>向量提供了比普通数组更多的功能，如自动扩容、插入和删除操作。</li>\n</ul>\n</li>\n<li><strong>列表（List）</strong>：<ul>\n<li>列表是一种抽象数据类型，它可以看作是链表的另一种称呼，或者是一种更通用的线性表，不特指某一种具体实现。</li>\n<li>列表可以是数组的抽象，也可以是链表的抽象，具体实现取决于编程语言或库。</li>\n</ul>\n</li>\n</ol>\n<p>这些数据结构都遵循线性表的特性，即元素之间是一对一的关系，并且可以通过位置来访问。不同类型的线性表适用于不同的应用场景，选择合适的数据结构可以提高程序的性能和效率。</p>\n<h4 id=\"1-2-非线性表包含以下几种常见的数据结构：\"><a href=\"#1-2-非线性表包含以下几种常见的数据结构：\" class=\"headerlink\" title=\"1.2 非线性表包含以下几种常见的数据结构：\"></a><strong>1.2 非线性表包含以下几种常见的数据结构：</strong></h4><p>非线性表（Non-linear lists）是指数据元素之间存在多对多关系的数据结构，这与线性表（如数组、链表、栈和队列）形成对比，其中数据元素之间是一对一的关系。非线性表包括多种复杂的数据结构，用于存储和表示具有层次或网状关系的数据集合。以下是一些常见的非线性数据结构：</p>\n<ol>\n<li><strong>树（Tree）</strong>：<ul>\n<li>树是一种层次化的数据结构，由节点组成，其中一个节点被指定为根节点，其余节点分为若干个子树。</li>\n<li>每个节点可以有多个子节点，但只有一个父节点（根节点没有父节点）。</li>\n<li>树用于表示具有层次关系的数据，如文件系统的目录结构、组织的层级结构等。</li>\n</ul>\n</li>\n<li><strong>二叉树（Binary Tree）</strong>：<ul>\n<li>二叉树是一种特殊的树，其中每个节点最多有两个子节点，分别为左子节点和右子节点。</li>\n<li>二叉树有多种特殊形式，如二叉搜索树（Binary Search Tree）、平衡二叉树（AVL Tree）、红黑树等。</li>\n</ul>\n</li>\n<li><strong>图（Graph）</strong>：<ul>\n<li>图是由顶点（节点）集合和边集合组成的数据结构，用于表示顶点之间的多对多关系。</li>\n<li>图可以是无向的，也可以是有向的，边可以带有权重。</li>\n<li>图用于模拟网络结构、社交关系、地图等复杂系统的交互和连接。</li>\n</ul>\n</li>\n<li><strong>堆（Heap）</strong>：<ul>\n<li>堆是一种特殊的完全二叉树，它满足堆属性，即父节点的键值总是大于或小于（取决于最大堆或最小堆）其子节点的键值。</li>\n<li>堆通常用于实现优先队列，以及排序算法如堆排序。</li>\n</ul>\n</li>\n<li><strong>散列表（Hash Table）</strong>：<ul>\n<li>散列表是一种基于散列函数的数据结构，它支持快速的查找、插入和删除操作。</li>\n<li>散列表通过散列函数将键映射到数组的位置，以存储和检索数据元素。</li>\n<li>虽然散列表在逻辑上可以看作是线性表，但由于其内部结构的复杂性，通常被认为是非线性数据结构。</li>\n</ul>\n</li>\n<li><strong>多维数组（Multi-dimensional Array）</strong>：<ul>\n<li>多维数组是数组的扩展，它可以看作是数组的数组，用于表示具有多个维度结构的数据。</li>\n<li>多维数组用于存储表格数据、图像像素等。</li>\n</ul>\n</li>\n</ol>\n<p>这些非线性数据结构在计算机科学中有着广泛的应用，它们用于解决各种复杂问题，如图的遍历、最短路径算法、网络流问题、搜索算法等。非线性数据结构的选择和实现取决于特定应用场景的需求和性能要求。</p>\n<hr>\n<h3 id=\"2-存储结构主要包含两种，顺序存储结构和链式存储结构\"><a href=\"#2-存储结构主要包含两种，顺序存储结构和链式存储结构\" class=\"headerlink\" title=\"2 存储结构主要包含两种，顺序存储结构和链式存储结构\"></a>2 存储结构主要包含两种，顺序存储结构和链式存储结构</h3><p>线性表和非线性表的存储结构有所不同，主要表现在它们在内存中的布局和对数据的访问方式上。</p>\n<h4 id=\"2-1-线性表的存储结构：\"><a href=\"#2-1-线性表的存储结构：\" class=\"headerlink\" title=\"2.1 线性表的存储结构：\"></a>2.1 <strong>线性表的存储结构</strong>：</h4><ol>\n<li><strong>顺序存储结构</strong>：<ul>\n<li>顺序存储结构是使用连续的内存空间来存储数据元素。</li>\n<li>例如，数组就是一种顺序存储结构，元素在内存中连续存放，可以通过索引直接访问。</li>\n<li>顺序存储结构的优点是访问速度快，时间复杂度为O(1)，但插入和删除操作可能需要移动大量元素，时间复杂度为O(n)。</li>\n</ul>\n</li>\n<li><strong>链式存储结构</strong>：<ul>\n<li>链式存储结构使用节点来存储数据元素，每个节点包含数据部分和指向下一个节点的指针。</li>\n<li>例如，链表就是一种链式存储结构，元素可以分散存储在内存中，通过指针连接。</li>\n<li>链式存储结构的优点是插入和删除操作效率高，只需改变指针的指向，时间复杂度为O(1)，但访问特定元素需要从头节点开始遍历，时间复杂度为O(n)。</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"2-2-非线性表的存储结构：\"><a href=\"#2-2-非线性表的存储结构：\" class=\"headerlink\" title=\"2.2 非线性表的存储结构：\"></a>2.2 <strong>非线性表的存储结构</strong>：</h4><ol>\n<li><strong>链式存储结构</strong>：<ul>\n<li>树和图等非线性结构通常使用链式存储结构，每个节点包含数据部分和指向其子节点或相邻节点的指针。</li>\n<li>例如，二叉树中的每个节点可能包含数据、左子节点指针和右子节点指针。</li>\n<li>图的存储结构可能更加复杂，可以使用邻接矩阵或邻接表来实现。</li>\n</ul>\n</li>\n<li><strong>多重链式存储结构</strong>：<ul>\n<li>对于一些复杂的非线性结构，如多维数组、广义表等，可能需要使用多重链式存储结构。</li>\n<li>这种结构中的节点可能包含多个指针，指向不同的相关节点。</li>\n</ul>\n</li>\n<li><strong>索引存储结构</strong>：<ul>\n<li>索引存储结构是在链式存储结构的基础上增加索引表，用于提高访问效率。</li>\n<li>索引表存储了节点地址或位置信息，可以快速定位到特定节点。</li>\n</ul>\n</li>\n<li><strong>散列存储结构</strong>：<ul>\n<li>散列存储结构使用散列函数将数据元素映射到存储地址。</li>\n<li>散列表（哈希表）是一种常见的散列存储结构，它通过散列函数处理键值，将数据存储在数组中的特定位置。</li>\n</ul>\n</li>\n</ol>\n<p>非线性表的存储结构通常比线性表更加复杂，因为它们需要能够表示数据元素之间的多对多关系。选择合适的存储结构对于非线性数据结构的性能和效率至关重要。</p>\n<hr>\n<h3 id=\"3-线性表和非线性表的不同存储结构，时间复杂度分别是多少？\"><a href=\"#3-线性表和非线性表的不同存储结构，时间复杂度分别是多少？\" class=\"headerlink\" title=\"3 线性表和非线性表的不同存储结构，时间复杂度分别是多少？\"></a>3 线性表和非线性表的不同存储结构，时间复杂度分别是多少？</h3><h4 id=\"3-1-线性表的不同存储结构主要影响数据的插入、删除和访问操作的时间复杂度。以下是几种常见的线性表存储结构及其时间复杂度：\"><a href=\"#3-1-线性表的不同存储结构主要影响数据的插入、删除和访问操作的时间复杂度。以下是几种常见的线性表存储结构及其时间复杂度：\" class=\"headerlink\" title=\"3.1 线性表的不同存储结构主要影响数据的插入、删除和访问操作的时间复杂度。以下是几种常见的线性表存储结构及其时间复杂度：\"></a>3.1 线性表的不同存储结构主要影响数据的插入、删除和访问操作的时间复杂度。以下是几种常见的线性表存储结构及其时间复杂度：</h4><ol>\n<li><strong>数组（Array） - 顺序存储结构</strong>：<ul>\n<li>插入操作：平均情况为O(n)，因为可能需要移动其他元素来为新元素腾出空间。</li>\n<li>删除操作：平均情况为O(n)，同样可能需要移动元素来填充被删除元素的位置。</li>\n<li>访问操作：O(1)，通过索引直接访问。</li>\n</ul>\n</li>\n<li><strong>链表（Linked List） - 链式存储结构</strong>：<ul>\n<li>单链表：<ul>\n<li>插入操作：O(1)，只需改变指针的指向。</li>\n<li>删除操作：O(1)，只需改变指针的指向。</li>\n<li>访问操作：O(n)，需要从头节点开始遍历。</li>\n</ul>\n</li>\n<li>双向链表：<ul>\n<li>插入操作：O(1)，需要改变两个指针的指向。</li>\n<li>删除操作：O(1)，需要改变两个指针的指向。</li>\n<li>访问操作：O(n)，需要从头节点或尾节点开始遍历。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong>栈（Stack） - 顺序或链式存储结构</strong>：<ul>\n<li>插入（push）操作：O(1)，无论是数组还是链表实现。</li>\n<li>删除（pop）操作：O(1)，无论是数组还是链表实现。</li>\n<li>访问（peek）操作：O(1)，无论是数组还是链表实现。</li>\n</ul>\n</li>\n<li><strong>队列（Queue） - 顺序或链式存储结构</strong>：<ul>\n<li>插入（enqueue）操作：O(1)，无论是数组还是链表实现。</li>\n<li>删除（dequeue）操作：O(1)，无论是数组还是链表实现。</li>\n<li>访问操作：O(1)，对于双端队列（Deque），无论是数组还是链表实现。</li>\n</ul>\n</li>\n<li><strong>向量（Vector） - 动态数组</strong>：<ul>\n<li>插入操作：平均情况为O(n)，因为可能需要扩容和移动元素。</li>\n<li>删除操作：平均情况为O(n)，因为可能需要移动元素来填充被删除元素的位置。</li>\n<li>访问操作：O(1)，通过索引直接访问。</li>\n</ul>\n</li>\n<li><strong>列表（List） - 抽象数据类型</strong>：<ul>\n<li>插入、删除和访问操作的时间复杂度取决于具体的实现方式。例如，如果列表是基于数组的，则与数组的复杂度相同；如果基于链表，则与链表的复杂度相同。</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"3-2-非线性表的存储结构通常比线性表更为复杂，因为它们需要能够表示数据元素之间的多对多关系。以下是一些常见的非线性表及其存储结构的时间复杂度：\"><a href=\"#3-2-非线性表的存储结构通常比线性表更为复杂，因为它们需要能够表示数据元素之间的多对多关系。以下是一些常见的非线性表及其存储结构的时间复杂度：\" class=\"headerlink\" title=\"3.2 非线性表的存储结构通常比线性表更为复杂，因为它们需要能够表示数据元素之间的多对多关系。以下是一些常见的非线性表及其存储结构的时间复杂度：\"></a>3.2 非线性表的存储结构通常比线性表更为复杂，因为它们需要能够表示数据元素之间的多对多关系。以下是一些常见的非线性表及其存储结构的时间复杂度：</h4><ol>\n<li><strong>树（Tree）</strong>：<ul>\n<li>存储结构：通常使用链式存储结构，每个节点包含数据部分和指向其子节点的指针。</li>\n<li>搜索操作：平均情况下，二叉搜索树（BST）的搜索、插入和删除操作的时间复杂度为O(log n)，但在最坏情况下（树高度不平衡）可能退化为O(n)。</li>\n<li>平衡树（如AVL树、红黑树）可以保证操作的最坏情况时间复杂度为O(log n)。</li>\n</ul>\n</li>\n<li><strong>图（Graph）</strong>：<ul>\n<li>存储结构：可以使用邻接矩阵或邻接表。</li>\n<li>邻接矩阵：空间复杂度为O(V^2)，其中V是顶点数。访问任意两个顶点的关系时间复杂度为O(1)，但空间复杂度较高，不适合存储稀疏图。</li>\n<li>邻接表：空间复杂度为O(V+E)，其中E是边数。访问相邻顶点的时间复杂度为O(1)，但访问所有顶点的时间复杂度为O(V)。</li>\n</ul>\n</li>\n<li><strong>堆（Heap）</strong>：<ul>\n<li>存储结构：通常使用数组来实现，可以看作是一种特殊的完全二叉树。</li>\n<li>插入操作：O(log n)</li>\n<li>删除操作：O(log n)</li>\n<li>构建堆操作：O(n)</li>\n<li>查找最大或最小元素操作：O(1)</li>\n</ul>\n</li>\n<li><strong>散列表（Hash Table）</strong>：<ul>\n<li>存储结构：使用数组加上散列函数。</li>\n<li>插入、删除和查找操作的平均时间复杂度为O(1)，但在最坏情况下可能退化为O(n)，这通常发生在发生大量散列冲突时。</li>\n</ul>\n</li>\n<li><strong>多维数组（Multi-dimensional Array）</strong>：<ul>\n<li>存储结构：可以使用顺序存储结构，元素在内存中连续存放。</li>\n<li>访问操作：O(1)，通过多维索引直接访问。</li>\n<li>插入和删除操作可能需要移动其他元素，时间复杂度为O(m)，其中m是受影响的元素数量。</li>\n</ul>\n</li>\n</ol>\n<p>非线性表的存储结构的选择和实现取决于特定应用场景的需求和性能要求。例如，如果需要频繁的搜索操作，可能会选择平衡树；如果需要表示复杂的关系网络，可能会选择图结构。</p>\n","feature":null,"text":"数据结构1 数据结构包含线性表和非线性表两部分，其中：1.1 线性表包含以下几种常见的数据结构：线性表（Linear List）是一种线性数据结构，它由一系列具...","permalink":"/post/数据结构","photos":[],"count_time":{"symbolsCount":"4.2k","symbolsTime":"4 mins."},"categories":[{"name":"数据结构","slug":"数据结构","count":1,"path":"api/categories/数据结构.json"}],"tags":[{"name":"数据结构","slug":"数据结构","count":1,"path":"api/tags/数据结构.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">数据结构</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%8C%85%E5%90%AB%E7%BA%BF%E6%80%A7%E8%A1%A8%E5%92%8C%E9%9D%9E%E7%BA%BF%E6%80%A7%E8%A1%A8%E4%B8%A4%E9%83%A8%E5%88%86%EF%BC%8C%E5%85%B6%E4%B8%AD%EF%BC%9A\"><span class=\"toc-text\">1 数据结构包含线性表和非线性表两部分，其中：</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-1-%E7%BA%BF%E6%80%A7%E8%A1%A8%E5%8C%85%E5%90%AB%E4%BB%A5%E4%B8%8B%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%9A\"><span class=\"toc-text\">1.1 线性表包含以下几种常见的数据结构：</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-2-%E9%9D%9E%E7%BA%BF%E6%80%A7%E8%A1%A8%E5%8C%85%E5%90%AB%E4%BB%A5%E4%B8%8B%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%9A\"><span class=\"toc-text\">1.2 非线性表包含以下几种常见的数据结构：</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84%E4%B8%BB%E8%A6%81%E5%8C%85%E5%90%AB%E4%B8%A4%E7%A7%8D%EF%BC%8C%E9%A1%BA%E5%BA%8F%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84%E5%92%8C%E9%93%BE%E5%BC%8F%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">2 存储结构主要包含两种，顺序存储结构和链式存储结构</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-1-%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84%EF%BC%9A\"><span class=\"toc-text\">2.1 线性表的存储结构：</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-2-%E9%9D%9E%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84%EF%BC%9A\"><span class=\"toc-text\">2.2 非线性表的存储结构：</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E7%BA%BF%E6%80%A7%E8%A1%A8%E5%92%8C%E9%9D%9E%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E4%B8%8D%E5%90%8C%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84%EF%BC%8C%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E5%88%AB%E6%98%AF%E5%A4%9A%E5%B0%91%EF%BC%9F\"><span class=\"toc-text\">3 线性表和非线性表的不同存储结构，时间复杂度分别是多少？</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-1-%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E4%B8%8D%E5%90%8C%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84%E4%B8%BB%E8%A6%81%E5%BD%B1%E5%93%8D%E6%95%B0%E6%8D%AE%E7%9A%84%E6%8F%92%E5%85%A5%E3%80%81%E5%88%A0%E9%99%A4%E5%92%8C%E8%AE%BF%E9%97%AE%E6%93%8D%E4%BD%9C%E7%9A%84%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E3%80%82%E4%BB%A5%E4%B8%8B%E6%98%AF%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E7%9A%84%E7%BA%BF%E6%80%A7%E8%A1%A8%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84%E5%8F%8A%E5%85%B6%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%EF%BC%9A\"><span class=\"toc-text\">3.1 线性表的不同存储结构主要影响数据的插入、删除和访问操作的时间复杂度。以下是几种常见的线性表存储结构及其时间复杂度：</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-2-%E9%9D%9E%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84%E9%80%9A%E5%B8%B8%E6%AF%94%E7%BA%BF%E6%80%A7%E8%A1%A8%E6%9B%B4%E4%B8%BA%E5%A4%8D%E6%9D%82%EF%BC%8C%E5%9B%A0%E4%B8%BA%E5%AE%83%E4%BB%AC%E9%9C%80%E8%A6%81%E8%83%BD%E5%A4%9F%E8%A1%A8%E7%A4%BA%E6%95%B0%E6%8D%AE%E5%85%83%E7%B4%A0%E4%B9%8B%E9%97%B4%E7%9A%84%E5%A4%9A%E5%AF%B9%E5%A4%9A%E5%85%B3%E7%B3%BB%E3%80%82%E4%BB%A5%E4%B8%8B%E6%98%AF%E4%B8%80%E4%BA%9B%E5%B8%B8%E8%A7%81%E7%9A%84%E9%9D%9E%E7%BA%BF%E6%80%A7%E8%A1%A8%E5%8F%8A%E5%85%B6%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84%E7%9A%84%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%EF%BC%9A\"><span class=\"toc-text\">3.2 非线性表的存储结构通常比线性表更为复杂，因为它们需要能够表示数据元素之间的多对多关系。以下是一些常见的非线性表及其存储结构的时间复杂度：</span></a></li></ol></li></ol></li></ol>","author":{"name":"Vegetabhl","slug":"blog-author","avatar":"https://raw.githubusercontent.com/Vegetabhl/Images/master/img/avatar_1.jpg","link":"/","description":"--欢迎来到小卜同学的小破站--     Welcome to Xiaobu’s little website","socials":{"github":"https://github.com/Vegetabhl","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/398361872"},"wechat":{"icon":"/svg/wx.svg","link":"https://raw.githubusercontent.com/Vegetabhl/Images/master/img/wx.jpg"}}}},"mapped":true,"hidden":false,"prev_post":{"title":"1-MySQL数据库软件配置、DDL、DML、DQL(部分)","uid":"a9163eccc7214878855118492d210e14","slug":"1-MySQL数据库软件配置、DDL、DML、DQL(部分)","date":"2024-05-01T11:43:02.713Z","updated":"2024-05-01T11:39:04.331Z","comments":true,"path":"api/articles/1-MySQL数据库软件配置、DDL、DML、DQL(部分).json","keywords":null,"cover":null,"text":"1-MySQL数据库软件配置、DDL、DML、DQL(部分) 数据库的基本概念 MySQL数据库软件 安装 卸载 配置 SQL 数据库的基本概念txt1. 数据...","permalink":"/post/1-MySQL数据库软件配置、DDL、DML、DQL(部分)","photos":[],"count_time":{"symbolsCount":"7.3k","symbolsTime":"7 mins."},"categories":[{"name":"mysql","slug":"mysql","count":3,"path":"api/categories/mysql.json"}],"tags":[{"name":"mysql","slug":"mysql","count":3,"path":"api/tags/mysql.json"}],"author":{"name":"Vegetabhl","slug":"blog-author","avatar":"https://raw.githubusercontent.com/Vegetabhl/Images/master/img/avatar_1.jpg","link":"/","description":"--欢迎来到小卜同学的小破站--     Welcome to Xiaobu’s little website","socials":{"github":"https://github.com/Vegetabhl","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/398361872"},"wechat":{"icon":"/svg/wx.svg","link":"https://raw.githubusercontent.com/Vegetabhl/Images/master/img/wx.jpg"}}}},"feature":null},"next_post":{"title":"系统安装备份","uid":"a9400e785c9bf8e2b92b99bfd432526c","slug":"系统安装备份","date":"2024-01-01T15:42:00.526Z","updated":"2024-05-29T15:24:37.379Z","comments":true,"path":"api/articles/系统安装备份.json","keywords":null,"cover":"https://vegetabhlimg.netlify.app/img/85e361e1166246d98faaad2591efb1e4_1.png","text":"1 Win安装:U盘启动快捷键： 1.1 Pe安装：1进pe，在diskgenius中对硬盘进行分区，右键选择快速分区 1注意以下几点 划分完成后，打开进行系统...","permalink":"/post/系统安装备份","photos":[],"count_time":{"symbolsCount":818,"symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"Vegetabhl","slug":"blog-author","avatar":"https://raw.githubusercontent.com/Vegetabhl/Images/master/img/avatar_1.jpg","link":"/","description":"--欢迎来到小卜同学的小破站--     Welcome to Xiaobu’s little website","socials":{"github":"https://github.com/Vegetabhl","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/398361872"},"wechat":{"icon":"/svg/wx.svg","link":"https://raw.githubusercontent.com/Vegetabhl/Images/master/img/wx.jpg"}}}},"feature":null}}