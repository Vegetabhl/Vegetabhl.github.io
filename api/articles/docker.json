{"title":"docker","uid":"4122a09df2e4f3d18921791a0dcc0507","slug":"docker","date":"2021-12-08T08:51:52.984Z","updated":"2024-12-23T14:39:21.377Z","comments":true,"path":"api/articles/docker.json","keywords":null,"cover":"https://vegetabhlimg.netlify.app/img/6f67e43f87f14bb0b2dbafc6b6b844d1_1.png","content":"<h2 id=\"0-参考\"><a href=\"#0-参考\" class=\"headerlink\" title=\"0 参考\"></a>0 参考</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">查找镜像：</span><br><span class=\"line\">docker search xxx  </span><br><span class=\"line\">查看镜像：</span><br><span class=\"line\">docker images     </span><br><span class=\"line\">看终止状态的容器：</span><br><span class=\"line\">docker ps -a</span><br><span class=\"line\">显示当前正在运行的容器（未终止）</span><br><span class=\"line\">docker ps</span><br><span class=\"line\">--------------------------</span><br><span class=\"line\">运行镜像：</span><br><span class=\"line\">docker run -it --name=mycentos7 centos:7 /bin/bash   -启动交互式容器之后是直接进入容器终端；可以查看容器的文件结构；使用exit命令则会退出终端并且停止容器。</span><br><span class=\"line\">docker run -itd --name=mycentos2 centos:7      -启动守护式容器之后不会进入容器终端；容器在后台运行</span><br><span class=\"line\">--------------------------</span><br><span class=\"line\">进入容器：</span><br><span class=\"line\">sudo docker attach  容器ID   这种方式进入后如果执行exit退出容器，则容器也会终止</span><br><span class=\"line\">sudo docker exec -it 775c7c9ee1e1 /bin/bash   推荐使用这种命令进入容器，因为此退出容器终端，不会导致容器的停止。</span><br><span class=\"line\">---------------------</span><br><span class=\"line\">退出容器:</span><br><span class=\"line\">exit</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">终止运行中的容器：</span><br><span class=\"line\">docker stop $CONTAINER_ID来终止一个运行中的容器。</span><br><span class=\"line\">启动终止状态的容器：</span><br><span class=\"line\">docker start来启动。</span><br><span class=\"line\">删除容器：</span><br><span class=\"line\">docker rm -f $CONTAINER_ID   只能删除停止状态的容器；-注意删除的是容器不是镜像  -f表示强制删除</span><br><span class=\"line\">删除镜像：</span><br><span class=\"line\">docker rmi 镜像id （镜像id可以通过docker images命令查看，并且删除镜像需要提前删除该镜像的容器，否则会失败）</span><br><span class=\"line\">重启一个容器：</span><br><span class=\"line\">docker restart命令来重启。</span><br><span class=\"line\">容器开机自动启动：</span><br><span class=\"line\">sudo docker update redis --restart=always</span><br></pre></td></tr></table></figure>\n\n<p><strong>进入容器</strong></p>\n<p>在使用 <strong>-d</strong> 参数时，容器启动后会进入后台。此时想要进入容器，可以通过以下指令进入：</p>\n<ul>\n<li>**docker attach  容器ID **</li>\n<li><strong>docker exec  容器ID</strong>   ：  推荐使用 docker exec 命令，因为此退出容器终端，不会导致容器的停止。</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker exec -it 775c7c9ee1e1 /bin/bash  </span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>docker容器使用</strong></p>\n<p><a href=\"https://www.runoob.com/docker/docker-container-usage.html\">https://www.runoob.com/docker/docker-container-usage.html</a></p>\n<h2 id=\"1-Docker概述\"><a href=\"#1-Docker概述\" class=\"headerlink\" title=\"1. Docker概述\"></a>1. Docker概述</h2><p><strong>目标</strong>：了解Docker是什么、应用场景及其组成部分</p>\n<p><strong>小结</strong>：</p>\n<ul>\n<li>Docker是一个应用容器引起；</li>\n<li>应用场景：web的自动化打包发布，自动化测试、可持续集成，安装各种组件；</li>\n<li>与传统虚拟机比较：docker启动速度比较快，占用体积较小；</li>\n<li>组成：docker守护进程，仓库，镜像，容器，docker客户端</li>\n</ul>\n<h2 id=\"2-Docker安装与启动\"><a href=\"#2-Docker安装与启动\" class=\"headerlink\" title=\"2. Docker安装与启动\"></a>2. Docker安装与启动</h2><p><strong>目标</strong>：在线安装docker并使用命令启动、停止docker</p>\n<p><strong>分析</strong>：</p>\n<ol>\n<li>更新yum源为ustc；</li>\n<li>安装docker;</li>\n<li>更新docker的镜像源为ustc；</li>\n<li>使用docker命令操作docker</li>\n</ol>\n<p><strong>小结</strong>：</p>\n<p>需求更新yum源和镜像源安装docker；安装之后可以使用 <code>docker -v</code></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 启动</span></span><br><span class=\"line\">systemctl start docker</span><br><span class=\"line\"><span class=\"comment\"># 停止</span></span><br><span class=\"line\">systemctl stop docker</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#查看docker启动状态</span></span><br><span class=\"line\">systemctl status docker</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"3-镜像相关命令\"><a href=\"#3-镜像相关命令\" class=\"headerlink\" title=\"3. 镜像相关命令\"></a>3. 镜像相关命令</h2><p><strong>目标</strong>：能够使用镜像的查看、搜索、拉取、删除命令</p>\n<p><strong>小结</strong>：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>拉取：docker pull 镜像名称:版本号（若不指定则会拉取最新的版本）</p>\n<p>删除全部镜像：docker rmi ` docker images -q ` （慎用）</p></blockquote>\n<h2 id=\"4-查看-创建并启动交互式容器\"><a href=\"#4-查看-创建并启动交互式容器\" class=\"headerlink\" title=\"4. 查看&amp;创建并启动交互式容器\"></a>4. 查看&amp;创建并启动交互式容器</h2><p><strong>目标</strong>：使用查看容器命令；拉取centos:7的镜像之后结合容器启动命令和选项 -it 启动交互式容器</p>\n<p><strong>分析</strong>：</p>\n<ol>\n<li>拉取镜像（容器是基于镜像运行）；</li>\n<li>创建并启动交互式容器，docker交互式容器（启动容器之后会直接进入容器的命令行终端，如果退出则容器停止运行）</li>\n</ol>\n<p><strong>小结</strong>：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看终止状态的容器容器</span></span><br><span class=\"line\">docker ps -a</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建并启动交互式容器</span></span><br><span class=\"line\">docker run -it --name=mycentos7 centos:7 /bin/bash   启动交互式容器之后是直接进入容器终端；可以查看容器的文件结构；使用<span class=\"built_in\">exit</span>命令则会退出终端并且停止容器。</span><br></pre></td></tr></table></figure>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>启动交互式容器之后是直接进入容器终端；可以查看容器的文件结构；使用exit命令则会退出终端并且停止容器。</p></blockquote>\n<h2 id=\"5-创建并启动守护式容器\"><a href=\"#5-创建并启动守护式容器\" class=\"headerlink\" title=\"5. 创建并启动守护式容器\"></a>5. 创建并启动守护式容器</h2><p><strong>目标</strong>：结合容器启动命令和选项 -di 启动守护式容器</p>\n<p><strong>分析</strong>：</p>\n<p>创建并启动docker容器，可以在后台运行；</p>\n<p>在创建交互式容器之后如果退出的话，容器处于停止状态，可以使用命令再次启动容器，使用命令进入容器并操作。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建并启动守护式容器</span></span><br><span class=\"line\">docker run -itd --name=mycentos2 centos:7  启动守护式容器之后不会进入容器终端；容器在后台运行</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 启动容器后再进入容器</span></span><br><span class=\"line\">docker <span class=\"built_in\">exec</span> -it mycentos2 /bin/bash</span><br></pre></td></tr></table></figure>\n\n<p><strong>小结</strong>：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>守护式容器在启动之后会一直在后台运行，即使进入容器之后执行exit命令也不会停止容器；</p>\n<p>适用于需要长期运行容器的情况</p></blockquote>\n<h2 id=\"6-停止-拷贝-挂载-查看ip-删除容器\"><a href=\"#6-停止-拷贝-挂载-查看ip-删除容器\" class=\"headerlink\" title=\"6. 停止&amp;拷贝&amp;挂载&amp;查看ip&amp;删除容器\"></a>6. 停止&amp;拷贝&amp;挂载&amp;查看ip&amp;删除容器</h2><p><strong>目标</strong>：能够使用容器的停止、拷贝文件、目录挂载、查看IP、删除命令</p>\n<p><strong>小结</strong>：</p>\n<ul>\n<li><p>容器停止、启动</p>\n</li>\n<li><p>拷贝文件：容器与宿主机之间的文件互拷</p>\n</li>\n<li><p>目录挂载：将宿主机的目录映射到容器对于目录</p>\n</li>\n<li><p>查看容器IP</p>\n<p><img src=\"https://vegetabhlimg.netlify.app/img/image-Docker-01.png\" alt=\"image-20211208170013384\"></p>\n</li>\n<li><p>容器删除：只能删除停止状态的容器；docker rm `docker ps -a -q`</p>\n</li>\n</ul>\n<h2 id=\"7-MySQL容器部署\"><a href=\"#7-MySQL容器部署\" class=\"headerlink\" title=\"7. MySQL容器部署\"></a>7. MySQL容器部署</h2><p><strong>目标</strong>：拉取mysql镜像，启动容器，操作容器中的mysql</p>\n<p><strong>分析</strong>：</p>\n<ol>\n<li><p>拉取mysql镜像；</p>\n</li>\n<li><p>创建并启动守护式容器；</p>\n</li>\n<li><p>在容器中操作mysql；</p>\n</li>\n<li><p>使用图形界面工具（windows）操作在docker中安装的mysql；在创建mysql容器的时候使用-p指定端口映射实现连接</p>\n<p>在创建容器的时候mysql的root用户可以指定远程访问的密码。</p>\n</li>\n</ol>\n<p><strong>小结</strong>：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>在创建容器的时候指定环境变量MYSQL_ROOT_PASSWORD表示使用root进行远程连接时候的密码。如果需要进行远程连接的话可以使用-p进行端口映射。</p></blockquote>\n<h2 id=\"8-Tomcat容器部署\"><a href=\"#8-Tomcat容器部署\" class=\"headerlink\" title=\"8. Tomcat容器部署\"></a>8. Tomcat容器部署</h2><p><strong>目标</strong>：拉取tomcat镜像，启动容器，操作容器中的tomcat</p>\n<p><strong>分析</strong>：</p>\n<ul>\n<li><p>将项目文件上传到容器中的tomcat目录（webapps）</p>\n<p>创建容器的时候可以指定-v进行目录挂载，tomcat在容器中的目录（&#x2F;usr&#x2F;local&#x2F;tomcat&#x2F;webapps）</p>\n</li>\n<li><p>可以通过外部浏览器访问容器中的项目</p>\n<p>创建容器的时候可以指定-p进行端口映射</p>\n</li>\n</ul>\n<ol>\n<li>拉取tomcat镜像；<code>docker pull tomcat</code></li>\n<li>创建并启动tomcat容器；</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -di --name=mytomcat -p 9000:8080 -v /usr/local/tomcat/webapps:/usr/local/tomcat/webapps tomcat</span><br></pre></td></tr></table></figure>\n\n\n\n<ol start=\"3\">\n<li><p>访问容器中tomcat</p>\n<p><a href=\"http://192.168.76.128:9000/\">http://192.168.76.128:9000</a></p>\n</li>\n</ol>\n<p><strong>小结</strong>：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>上传项目文件可以使用容器的目录挂载功能，外部访问可以使用端口映射</p></blockquote>\n<h2 id=\"9-Nginx容器部署\"><a href=\"#9-Nginx容器部署\" class=\"headerlink\" title=\"9. Nginx容器部署\"></a>9. Nginx容器部署</h2><p><strong>目标</strong>：拉取nginx镜像，启动容器，访问nginx</p>\n<p><strong>分析</strong>：</p>\n<p>nginx的默认访问端口是：80</p>\n<p>在创建容器的时候需要进行端口映射，指定-p，映射的端口80</p>\n<ol>\n<li>拉取nginx镜像；</li>\n<li>创建并启动nginx容器；</li>\n<li>在浏览器上访问容器中nginx，<a href=\"http://192.168.76.128/\">http://192.168.76.128</a></li>\n</ol>\n<p><strong>小结</strong>：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>如果被占用了80端口，那么在指定映射的时候可以改变宿主机的端口映射，在访问时也需要带上端口号。</p></blockquote>\n<h2 id=\"10-Redis容器部署\"><a href=\"#10-Redis容器部署\" class=\"headerlink\" title=\"10. Redis容器部署\"></a>10. Redis容器部署</h2><p><strong>目标</strong>：拉取redis镜像，启动容器，操作容器中的redis</p>\n<p><strong>分析</strong>：</p>\n<ol>\n<li>拉取redis镜像；</li>\n<li>创建并启动redis容器；默认端口是6379，如果需要外部访问则可以使用端口映射；</li>\n<li>连接redis: ①使用命令行客户端 ②使用图形界面工具</li>\n</ol>\n<p><strong>小结</strong>：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建容器</span></span><br><span class=\"line\">docker run -di --name=myredis -p 6379:6379 redis</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 进入容器</span></span><br><span class=\"line\">docker <span class=\"built_in\">exec</span> -it myredis /bin/bash</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"11-docker-compose简介-安装\"><a href=\"#11-docker-compose简介-安装\" class=\"headerlink\" title=\"11. docker-compose简介&amp;安装\"></a>11. docker-compose简介&amp;安装</h2><p><strong>目标</strong>：docker-compose的作用；能够安装docker-compose</p>\n<p><strong>小结</strong>：</p>\n<p>docker-compose是一个应用工具；可以通过配置docker-compose.yml文件同时启动多个容器。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>部署项目时可以编写一个docker-compose.yml文件作为启动项目单位，同时启动项目相关的那些容器。</p></blockquote>\n<h2 id=\"12-docker-compose应用\"><a href=\"#12-docker-compose应用\" class=\"headerlink\" title=\"12. docker-compose应用\"></a>12. docker-compose应用</h2><p><strong>目标</strong>：编写模版文件同时启动docker容器</p>\n<p><strong>分析</strong>：</p>\n<p>docker-compose可以实现一次启动多个容器；通过配置docker-compose模板文件（docker-compose.yml）,在这个配置文件中去配置各个容器及其相关的依赖。</p>\n<ol>\n<li>编写模板文件；</li>\n<li>创建并启动docker-compose项目（模板文件所在的目录，docker-compose.yml）</li>\n<li>测试</li>\n</ol>\n<p><strong>小结</strong>：</p>\n<p>docker-compose可以配置一个模板文件实现一次可以启动多个容器，运行时候可以执行一个up则会创建并启动模板文件中的各个服务。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>模板文件是yml格式的；编写的时候需要注意其格式。</p></blockquote>\n<h2 id=\"13-迁移与备份\"><a href=\"#13-迁移与备份\" class=\"headerlink\" title=\"13. 迁移与备份\"></a>13. 迁移与备份</h2><p><strong>目标</strong>：能够将容器保存为镜像，备份，恢复镜像再启动以恢复的镜像作为基础的容器</p>\n<p><strong>分析</strong>：</p>\n<p>在当前的容器中安装了各种组件；期望在其他服务器上也能快速拥有该容器的一切环境；可以将当前的容器制作为一个镜像，再将该奖项复制到其他服务器，其他服务器再基于镜像运行容器。</p>\n<ol>\n<li>将容器保存为一个镜像；</li>\n<li>备份镜像；</li>\n<li>恢复镜像；</li>\n<li>基于镜像运行容器</li>\n</ol>\n<p><strong>小结</strong>：</p>\n<p>docker容器可以保存为一个镜像；备份为一个镜像包（*.tar）可以复制迁移到其他服务器，再恢复该tar包中的镜像，基于镜像运行容器实现环境的一致。</p>\n<h2 id=\"14-使用Dockerfile创建镜像\"><a href=\"#14-使用Dockerfile创建镜像\" class=\"headerlink\" title=\"14. 使用Dockerfile创建镜像\"></a>14. 使用Dockerfile创建镜像</h2><p><strong>目标</strong>：使用Dockerfile创建一个自定义jdk1.8的镜像</p>\n<p><strong>分析</strong>：</p>\n<p>假设在centos7作为基础镜像上；添加jdk1.8并构建一个包含jdk1.8的centos7新镜像。</p>\n<p>– Dockerfile可以实现；Dockerfile是由一系列命令和参数构成的文本文件，在文件中可以指定各个组件资源和运行命令等。</p>\n<p>实现步骤：</p>\n<ol>\n<li>拉取centos7镜像；</li>\n<li>上传jdk1.8；</li>\n<li>编写Dockerfile文件；</li>\n<li>构建镜像；</li>\n<li>测试（基于新镜像创建并运行容器，运行java -version）</li>\n</ol>\n<p><strong>小结</strong>：</p>\n<p>Dockerfile可以基于镜像制作镜像；<code>docker build -t=&#39;jdk1.8&#39; . </code></p>\n<h2 id=\"15-私有仓库搭建与配置\"><a href=\"#15-私有仓库搭建与配置\" class=\"headerlink\" title=\"15. 私有仓库搭建与配置\"></a>15. 私有仓库搭建与配置</h2><p><strong>目标</strong>：拉取、启动私有仓库镜像并可以访问私有仓库</p>\n<p><strong>小结</strong>：</p>\n<p>拉取registry镜像；基于镜像创建私有仓库容器；需要去修改docker的一个配置文件指定私有仓库地址；再访问私有仓库：<a href=\"http://ip:5000/v2/_catalog\">http://ip:5000/v2/_catalog</a></p>\n<h2 id=\"16-将镜像上传至私有仓库\"><a href=\"#16-将镜像上传至私有仓库\" class=\"headerlink\" title=\"16. 将镜像上传至私有仓库\"></a>16. 将镜像上传至私有仓库</h2><p><strong>目标</strong>：将制作的jdk1.8的镜像上传到私有仓库</p>\n<p><strong>小结</strong>：</p>\n<p>将本地镜像打标签（标记本地镜像为一个私有仓库中的镜像）；将打了标签的镜像推送到私有仓库。</p>\n<h2 id=\"17-从私有仓库拉取镜像\"><a href=\"#17-从私有仓库拉取镜像\" class=\"headerlink\" title=\"17. 从私有仓库拉取镜像\"></a>17. 从私有仓库拉取镜像</h2><p><strong>目标</strong>：将私有仓库中的jdk1.8镜像拉取到本地</p>\n<p><strong>小结</strong>：</p>\n<ul>\n<li>私有仓库与拉取镜像的服务器是在同一台机器上：直接拉取镜像； <code>docker pull 私有仓库地址/镜像名称</code></li>\n<li>私有仓库与拉取镜像的服务器是不在同一台机器上：需要去修改docker的配置文件，指定私有仓库地址；再执行拉取镜像的命令。</li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>如果本地存在同名的镜像需要先删除镜像后拉取</p></blockquote>\n","feature":true,"text":"0 参考12345678910111213141516171819查找镜像：docker search xxx 查看镜像：docker images 看终止状态...","permalink":"/post/docker","photos":[],"count_time":{"symbolsCount":"5.2k","symbolsTime":"5 mins."},"categories":[{"name":"网络","slug":"网络","count":2,"path":"api/categories/网络.json"},{"name":"常用工具","slug":"网络/常用工具","count":2,"path":"api/categories/网络/常用工具.json"},{"name":"项目","slug":"网络/常用工具/项目","count":2,"path":"api/categories/网络/常用工具/项目.json"},{"name":"环境配置","slug":"网络/常用工具/项目/环境配置","count":2,"path":"api/categories/网络/常用工具/项目/环境配置.json"},{"name":"docker","slug":"网络/常用工具/项目/环境配置/docker","count":1,"path":"api/categories/网络/常用工具/项目/环境配置/docker.json"}],"tags":[{"name":"网络","slug":"网络","count":6,"path":"api/tags/网络.json"},{"name":"常用工具","slug":"常用工具","count":6,"path":"api/tags/常用工具.json"},{"name":"项目","slug":"项目","count":5,"path":"api/tags/项目.json"},{"name":"环境配置","slug":"环境配置","count":5,"path":"api/tags/环境配置.json"},{"name":"docker","slug":"docker","count":4,"path":"api/tags/docker.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#0-%E5%8F%82%E8%80%83\"><span class=\"toc-text\">0 参考</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-Docker%E6%A6%82%E8%BF%B0\"><span class=\"toc-text\">1. Docker概述</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-Docker%E5%AE%89%E8%A3%85%E4%B8%8E%E5%90%AF%E5%8A%A8\"><span class=\"toc-text\">2. Docker安装与启动</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-%E9%95%9C%E5%83%8F%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4\"><span class=\"toc-text\">3. 镜像相关命令</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-%E6%9F%A5%E7%9C%8B-%E5%88%9B%E5%BB%BA%E5%B9%B6%E5%90%AF%E5%8A%A8%E4%BA%A4%E4%BA%92%E5%BC%8F%E5%AE%B9%E5%99%A8\"><span class=\"toc-text\">4. 查看&amp;创建并启动交互式容器</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-%E5%88%9B%E5%BB%BA%E5%B9%B6%E5%90%AF%E5%8A%A8%E5%AE%88%E6%8A%A4%E5%BC%8F%E5%AE%B9%E5%99%A8\"><span class=\"toc-text\">5. 创建并启动守护式容器</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#6-%E5%81%9C%E6%AD%A2-%E6%8B%B7%E8%B4%9D-%E6%8C%82%E8%BD%BD-%E6%9F%A5%E7%9C%8Bip-%E5%88%A0%E9%99%A4%E5%AE%B9%E5%99%A8\"><span class=\"toc-text\">6. 停止&amp;拷贝&amp;挂载&amp;查看ip&amp;删除容器</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#7-MySQL%E5%AE%B9%E5%99%A8%E9%83%A8%E7%BD%B2\"><span class=\"toc-text\">7. MySQL容器部署</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#8-Tomcat%E5%AE%B9%E5%99%A8%E9%83%A8%E7%BD%B2\"><span class=\"toc-text\">8. Tomcat容器部署</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#9-Nginx%E5%AE%B9%E5%99%A8%E9%83%A8%E7%BD%B2\"><span class=\"toc-text\">9. Nginx容器部署</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#10-Redis%E5%AE%B9%E5%99%A8%E9%83%A8%E7%BD%B2\"><span class=\"toc-text\">10. Redis容器部署</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#11-docker-compose%E7%AE%80%E4%BB%8B-%E5%AE%89%E8%A3%85\"><span class=\"toc-text\">11. docker-compose简介&amp;安装</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#12-docker-compose%E5%BA%94%E7%94%A8\"><span class=\"toc-text\">12. docker-compose应用</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#13-%E8%BF%81%E7%A7%BB%E4%B8%8E%E5%A4%87%E4%BB%BD\"><span class=\"toc-text\">13. 迁移与备份</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#14-%E4%BD%BF%E7%94%A8Dockerfile%E5%88%9B%E5%BB%BA%E9%95%9C%E5%83%8F\"><span class=\"toc-text\">14. 使用Dockerfile创建镜像</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#15-%E7%A7%81%E6%9C%89%E4%BB%93%E5%BA%93%E6%90%AD%E5%BB%BA%E4%B8%8E%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">15. 私有仓库搭建与配置</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#16-%E5%B0%86%E9%95%9C%E5%83%8F%E4%B8%8A%E4%BC%A0%E8%87%B3%E7%A7%81%E6%9C%89%E4%BB%93%E5%BA%93\"><span class=\"toc-text\">16. 将镜像上传至私有仓库</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#17-%E4%BB%8E%E7%A7%81%E6%9C%89%E4%BB%93%E5%BA%93%E6%8B%89%E5%8F%96%E9%95%9C%E5%83%8F\"><span class=\"toc-text\">17. 从私有仓库拉取镜像</span></a></li></ol>","author":{"name":"Vegetabhl","slug":"blog-author","avatar":"https://raw.githubusercontent.com/Vegetabhl/Images/master/img/avatar_1.jpg","link":"/","description":"--欢迎来到小卜同学的小破站--     Welcome to Xiaobu’s little website","socials":{"github":"https://github.com/Vegetabhl","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/398361872"},"wechat":{"icon":"/svg/wx.svg","link":"https://raw.githubusercontent.com/Vegetabhl/Images/master/img/wx.jpg"}}}},"mapped":true,"hidden":false,"prev_post":{"title":"个人深度学习工作站配置","uid":"81dd16a88c7b3bab33afb0177c60d050","slug":"个人深度学习工作站配置","date":"2022-09-23T10:49:36.000Z","updated":"2024-06-07T12:29:53.644Z","comments":true,"path":"api/articles/个人深度学习工作站配置.json","keywords":null,"cover":"https://vegetabhlimg.netlify.app/img/57f951ee01884227a4bff98600fb85b0_0.png","text":"1. 个人深度学习工作站详情从第二章开始 2. 系统篇系统选择 DL 开发里面最常用的 Ubuntu，最新的稳定版本是 20.04，安装过程需要准备一个 U 盘...","permalink":"/post/个人深度学习工作站配置","photos":[],"count_time":{"symbolsCount":"16k","symbolsTime":"14 mins."},"categories":[{"name":"Python","slug":"Python","count":3,"path":"api/categories/Python.json"},{"name":"deep learning","slug":"Python/deep-learning","count":3,"path":"api/categories/Python/deep-learning.json"},{"name":"操作系统","slug":"Python/deep-learning/操作系统","count":1,"path":"api/categories/Python/deep-learning/操作系统.json"},{"name":"环境配置","slug":"Python/deep-learning/操作系统/环境配置","count":1,"path":"api/categories/Python/deep-learning/操作系统/环境配置.json"},{"name":"docker","slug":"Python/deep-learning/操作系统/环境配置/docker","count":1,"path":"api/categories/Python/deep-learning/操作系统/环境配置/docker.json"}],"tags":[{"name":"Python","slug":"Python","count":6,"path":"api/tags/Python.json"},{"name":"deep learning","slug":"deep-learning","count":4,"path":"api/tags/deep-learning.json"},{"name":"操作系统","slug":"操作系统","count":3,"path":"api/tags/操作系统.json"},{"name":"环境配置","slug":"环境配置","count":5,"path":"api/tags/环境配置.json"},{"name":"docker","slug":"docker","count":4,"path":"api/tags/docker.json"}],"author":{"name":"Vegetabhl","slug":"blog-author","avatar":"https://raw.githubusercontent.com/Vegetabhl/Images/master/img/avatar_1.jpg","link":"/","description":"--欢迎来到小卜同学的小破站--     Welcome to Xiaobu’s little website","socials":{"github":"https://github.com/Vegetabhl","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/398361872"},"wechat":{"icon":"/svg/wx.svg","link":"https://raw.githubusercontent.com/Vegetabhl/Images/master/img/wx.jpg"}}}},"feature":true},"next_post":{"title":"Winning 住院病历","uid":"5fc3c8705ea835b2bb6930af6ce60158","slug":"winning 住院病历","date":"2024-12-30T15:48:51.199Z","updated":"2024-12-31T14:42:34.000Z","comments":true,"path":"api/articles/winning 住院病历.json","keywords":null,"cover":[],"text":"1 住院病历1.住院病历组成 2.会诊申请流程 会诊申请科室填写会诊申请一&gt;会诊接收后答复一&gt;会诊接收科室填写会诊反馈一&gt;会诊申请科室反馈一&...","permalink":"/post/winning 住院病历","photos":[],"count_time":{"symbolsCount":471,"symbolsTime":"1 mins."},"categories":[{"name":"工作","slug":"工作","count":9,"path":"api/categories/工作.json"}],"tags":[{"name":"工作","slug":"工作","count":8,"path":"api/tags/工作.json"}],"author":{"name":"Vegetabhl","slug":"blog-author","avatar":"https://raw.githubusercontent.com/Vegetabhl/Images/master/img/avatar_1.jpg","link":"/","description":"--欢迎来到小卜同学的小破站--     Welcome to Xiaobu’s little website","socials":{"github":"https://github.com/Vegetabhl","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/398361872"},"wechat":{"icon":"/svg/wx.svg","link":"https://raw.githubusercontent.com/Vegetabhl/Images/master/img/wx.jpg"}}}},"feature":null}}