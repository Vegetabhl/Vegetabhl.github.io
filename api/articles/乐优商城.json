{"title":"leyou","uid":"875445e0a3c9118d4826bac86a89960d","slug":"乐优商城","date":"2020-12-03T16:00:00.000Z","updated":"2024-05-29T15:23:09.772Z","comments":true,"path":"api/articles/乐优商城.json","keywords":null,"cover":[],"content":"<h2 id=\"0-格式\"><a href=\"#0-格式\" class=\"headerlink\" title=\"0 格式\"></a>0 格式</h2><h2 id=\"1-SpringCloud\"><a href=\"#1-SpringCloud\" class=\"headerlink\" title=\"1 SpringCloud\"></a>1 SpringCloud</h2><h3 id=\"1-1-Zuul网关\"><a href=\"#1-1-Zuul网关\" class=\"headerlink\" title=\"1.1 Zuul网关\"></a>1.1 Zuul网关</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server:</span><br><span class=\"line\">  port: <span class=\"number\">10010</span></span><br><span class=\"line\">spring:</span><br><span class=\"line\">  application:</span><br><span class=\"line\">    name: itcast-zuul</span><br><span class=\"line\">eureka:</span><br><span class=\"line\">  client:</span><br><span class=\"line\">    service-url:</span><br><span class=\"line\">      defaultZone: http:<span class=\"comment\">//localhost:10086/eureka</span></span><br><span class=\"line\">zuul:</span><br><span class=\"line\">  routes: #这个路由可以配置多个，想暴露哪个接口直接再配置一个就可以了</span><br><span class=\"line\">    itcast-provider1: /providerUser<span class=\"comment\">/**   #将符合path规则的一切请求，都代理到 url参数指定的地址,itcast-provider1是服务ID，不能随便瞎起名，这里的意思就是说将符合/providerUser/**这个路径规则的请求路由到itcast-provider1，下面同理。</span></span><br><span class=\"line\"><span class=\"comment\">    itcast-consumer1: /consumerUser/**</span></span><br><span class=\"line\"><span class=\"comment\">  prefix: /api #路由前缀</span></span><br><span class=\"line\"><span class=\"comment\">           </span></span><br><span class=\"line\"><span class=\"comment\"> # 核心句：我们将符合`path` 规则的一切请求，都代理到 `url`参数指定的地址</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"1-2-consumer服务消费方\"><a href=\"#1-2-consumer服务消费方\" class=\"headerlink\" title=\"1.2 consumer服务消费方\"></a>1.2 consumer服务消费方</h3><p>yml 配置文件常见配置</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server:</span><br><span class=\"line\">  port: <span class=\"number\">8080</span></span><br><span class=\"line\">spring:</span><br><span class=\"line\">  application:</span><br><span class=\"line\">    name: itcast-consumer1  # 应用服务实例名称，会在Eureka注册中心中显示</span><br><span class=\"line\">eureka:</span><br><span class=\"line\">  client:</span><br><span class=\"line\">    service-url:</span><br><span class=\"line\">      defaultZone: http:<span class=\"comment\">//localhost:10086/eureka  </span></span><br><span class=\"line\">    registry-fetch-interval-seconds: <span class=\"number\">5</span>  #每<span class=\"number\">5</span>秒拉去一次服务，这里设置小一点一遍尽快获取服务的更新，但是在生产环境下默认是<span class=\"number\">30</span>秒，我们不需要修改。</span><br><span class=\"line\">hystrix:</span><br><span class=\"line\">  command:</span><br><span class=\"line\">    <span class=\"keyword\">default</span>:</span><br><span class=\"line\">      execution:</span><br><span class=\"line\">        isolation:</span><br><span class=\"line\">          thread:</span><br><span class=\"line\">            timeoutInMilliseconds: <span class=\"number\">6000</span> # 设置hystrix的超时时间为6000ms,Hystix的默认超时时长为1000ms</span><br><span class=\"line\">feign:</span><br><span class=\"line\">  hystrix:</span><br><span class=\"line\">    enabled: <span class=\"literal\">true</span> # 开启Feign的熔断功能,默认这里是关闭的，开启后</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"1-3-registry注册中心\"><a href=\"#1-3-registry注册中心\" class=\"headerlink\" title=\"1.3 registry注册中心\"></a>1.3 registry注册中心</h3><p>yml 配置文件常见配置</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server:</span><br><span class=\"line\">  port: <span class=\"number\">10086</span></span><br><span class=\"line\">spring:</span><br><span class=\"line\">  application:</span><br><span class=\"line\">    name: itcast-eureka # 应用名称，会在Eureka注册中心中显示</span><br><span class=\"line\">eureka:</span><br><span class=\"line\">  client:</span><br><span class=\"line\">    service-url:</span><br><span class=\"line\">      defaultZone: http:<span class=\"comment\">//localhost:$&#123;server.port&#125;/eureka  #EurekaServer的地址，现在是自己的地址，如果是集群，需要加上其它Server的地址</span></span><br><span class=\"line\">\tregister-with-eureka: <span class=\"literal\">false</span> # 注册中心不注册自己</span><br><span class=\"line\">    fetch-registry: <span class=\"literal\">false</span> # 在这里指的是注册中心本身不去拉去服务</span><br><span class=\"line\">  server:</span><br><span class=\"line\">    enable-self-preservation: <span class=\"literal\">false</span> # 关闭自我保护模式（默认为打开）</span><br><span class=\"line\">    eviction-interval-timer-in-ms: <span class=\"number\">5000</span> # 扫描失效服务的间隔时间（默认为为<span class=\"number\">60</span>*1000ms）</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"1-4-provider服务提供方\"><a href=\"#1-4-provider服务提供方\" class=\"headerlink\" title=\"1.4 provider服务提供方\"></a>1.4 provider服务提供方</h3><p>yml 配置文件常见配置</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server:</span><br><span class=\"line\">  port: <span class=\"number\">8090</span></span><br><span class=\"line\">spring:</span><br><span class=\"line\">  thymeleaf:</span><br><span class=\"line\">    cache: <span class=\"literal\">false</span></span><br><span class=\"line\">  datasource:</span><br><span class=\"line\">    driver-class-name: com.mysql.cj.jdbc.Driver</span><br><span class=\"line\">    url: jdbc:mysql:<span class=\"comment\">//localhost:3306/db4?characterEncoding=utf-8&amp;useSSL=false&amp;serverTimezone=UTC</span></span><br><span class=\"line\">    username: root</span><br><span class=\"line\">    password: root</span><br><span class=\"line\">  application:</span><br><span class=\"line\">      name: itcast-provider1 # 应用名称，会在Eureka注册中心中显示</span><br><span class=\"line\">mybatis:</span><br><span class=\"line\">  type-aliases-<span class=\"keyword\">package</span>: cn.itcast.pojo</span><br><span class=\"line\">eureka:</span><br><span class=\"line\">  client:</span><br><span class=\"line\">    service-url:</span><br><span class=\"line\">      defaultZone: http:<span class=\"comment\">//localhost:10086/eureka</span></span><br><span class=\"line\">  instance:</span><br><span class=\"line\">    lease-renewal-interval-in-seconds: <span class=\"number\">5</span> #每<span class=\"number\">5</span>秒一次心跳时间</span><br><span class=\"line\">    lease-expiration-duration-in-seconds: <span class=\"number\">15</span> #过期时间,超过<span class=\"number\">15</span>秒没有发送心跳就会过期，也就是认为服务宕机了</span><br><span class=\"line\">    </span><br><span class=\"line\">#每隔<span class=\"number\">5</span>秒发送一次心跳,即续约(rnew)证明自己还活着，超过<span class=\"number\">15</span>秒没有发送则说明死亡，注册中心就会将该实例剔除掉，在生产环境下默认为<span class=\"number\">30</span>,<span class=\"number\">90</span>不要动，但是在开发阶段可以设置的小一些。</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"1-5-注意：\"><a href=\"#1-5-注意：\" class=\"headerlink\" title=\"1.5 注意：\"></a>1.5 注意：</h3><p>​\t这里需要注意下，无论是服务消费方还是服务提供方，他们其实都是一个个的服务，也就是说服务方也可以是消费方，消费方也可以是服务方。</p>\n<h2 id=\"1-6-熔断\"><a href=\"#1-6-熔断\" class=\"headerlink\" title=\"1.6 熔断\"></a>1.6 熔断</h2><p>服务器支持的线程和并发数有限，请求一直阻塞，会导致服务器资源耗尽，从而导致所有其它服务都不可用，形成雪崩效应。</p>\n<p>Hystrix为每个依赖服务调用分配一个小的线程池，如果线程池已满调用将被立即拒绝，默认不采用排队.加速失败判定时间。</p>\n<h3 id=\"1-6-1-开启熔断\"><a href=\"#1-6-1-开启熔断\" class=\"headerlink\" title=\"1.6.1 开启熔断\"></a>1.6.1 开启熔断</h3><p>由于类上的注解越来越多，于是Spring就提供了一个组合注解：@SpringCloudApplication，相当于下面三个注解</p>\n<p>&#x2F;<em>@SpringBootApplication<br>@EnableDiscoveryClient &#x2F;&#x2F;开启Eureka客户端功能<br>@EnableCircuitBreaker &#x2F;&#x2F;开启熔断</em>&#x2F;</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"comment\">@EnableDiscoveryClient //开启Eureka客户端功能</span></span><br><span class=\"line\"><span class=\"comment\">@EnableCircuitBreaker //开启熔断*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@SpringCloudApplication</span><span class=\"comment\">//这个组合注解就相当于上面三个</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Consumer1Application</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        SpringApplication.run(Consumer1Application.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"1-6-2编写降级逻辑（这里可以着重看下一节feign，将其合在一起写了）\"><a href=\"#1-6-2编写降级逻辑（这里可以着重看下一节feign，将其合在一起写了）\" class=\"headerlink\" title=\"1.6.2编写降级逻辑（这里可以着重看下一节feign，将其合在一起写了）\"></a>1.6.2编写降级逻辑（这里可以着重看下一节feign，将其合在一起写了）</h3><p>我们改造itcast-service-consumer，当目标服务的调用出现故障，我们希望快速失败，给用户一个友好提示。因此需要提前编写好失败时的降级处理逻辑，要使用HystixCommond来完成：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;consumer/user&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@DefaultProperties(defaultFallback = &quot;fallBackMethod&quot;)</span> <span class=\"comment\">// 指定一个类的全局熔断方法</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserController</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> RestTemplate restTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping</span></span><br><span class=\"line\">    <span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\">    <span class=\"meta\">@HystrixCommand</span> <span class=\"comment\">// 标记该方法需要熔断,并且这里没有指定熔断放方法名，所以使用的是全局的熔断方法</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">queryUserById</span><span class=\"params\">(<span class=\"meta\">@RequestParam(&quot;id&quot;)</span> Long id)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">user</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.restTemplate.getForObject(<span class=\"string\">&quot;http://service-provider/user/&quot;</span> + id, String.class);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> user;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">  \t<span class=\"comment\">//全局熔断方法</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">fallBackMethod</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;请求繁忙，请稍后再试！&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"1-6-3-设置超时\"><a href=\"#1-6-3-设置超时\" class=\"headerlink\" title=\"1.6.3 设置超时\"></a>1.6.3 设置超时</h3><p>在之前的案例中，请求在超过1秒后都会返回错误信息，这是因为Hystix的默认超时时长为1，我们可以通过配置修改这个值：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">hystrix:</span></span><br><span class=\"line\">  <span class=\"attr\">command:</span></span><br><span class=\"line\">    <span class=\"attr\">default:</span></span><br><span class=\"line\">      <span class=\"attr\">execution:</span></span><br><span class=\"line\">        <span class=\"attr\">isolation:</span></span><br><span class=\"line\">          <span class=\"attr\">thread:</span></span><br><span class=\"line\">            <span class=\"attr\">timeoutInMilliseconds:</span> <span class=\"number\">6000</span> <span class=\"comment\"># 设置hystrix的超时时间为6000ms</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>改造服务提供者</strong></p>\n<p>改造服务提供者的UserController接口，随机休眠一段时间，以触发熔断：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@GetMapping(&quot;&#123;id&#125;&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> User <span class=\"title function_\">queryUserById</span><span class=\"params\">(<span class=\"meta\">@PathVariable(&quot;id&quot;)</span> Long id)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        Thread.sleep(<span class=\"number\">6000</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.userService.queryUserById(id);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"1-7-Feign\"><a href=\"#1-7-Feign\" class=\"headerlink\" title=\"1.7 Feign\"></a>1.7 Feign</h2><p>服务间的内部调用</p>\n<h3 id=\"1-7-1-开启Feign功能\"><a href=\"#1-7-1-开启Feign功能\" class=\"headerlink\" title=\"1.7.1 开启Feign功能\"></a>1.7.1 开启Feign功能</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringCloudApplication</span><span class=\"comment\">//这个组合注解就相当于上面三个</span></span><br><span class=\"line\"><span class=\"meta\">@EnableFeignClients</span> <span class=\"comment\">//开启feign的启动器，有了这个就不需要再使用RestTemplate了，因为它内部已经集成了</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Consumer1Application</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        SpringApplication.run(Consumer1Application.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"1-7-2-Feign的客户端\"><a href=\"#1-7-2-Feign的客户端\" class=\"headerlink\" title=\"1.7.2 Feign的客户端\"></a>1.7.2 Feign的客户端</h3><p><img src=\"https://vegetabhlimg.netlify.app/img/image-leyou-01.png\"></p>\n<h4 id=\"1-7-2-1内容\"><a href=\"#1-7-2-1内容\" class=\"headerlink\" title=\"1.7.2.1内容\"></a>1.7.2.1内容</h4><p>1 Controller</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/consumer&quot;)</span></span><br><span class=\"line\"><span class=\"comment\">//@DefaultProperties(defaultFallback = &quot;fallbackMethod&quot;)//这里是指定一个全局的熔断方法</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ConsumerController</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">   <span class=\"keyword\">private</span> UserClient userClient; <span class=\"comment\">//注入feign实例对象</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/user&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\">    <span class=\"comment\">//@HystrixCommand //这里没有指定熔断放方法名，所以使用的是全局的熔断方法</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">findById</span><span class=\"params\">(<span class=\"meta\">@RequestParam(&quot;id&quot;)</span> Long id)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> userClient.findById(id).toString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    //这是一个全局的熔断方法，注意这里的返回值类型</span></span><br><span class=\"line\"><span class=\"comment\">    public String fallbackMethod() &#123;</span></span><br><span class=\"line\"><span class=\"comment\">        return &quot;服务正在忙，请稍后再试!!!&quot;;</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>2 UserClient 接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@FeignClient(value = &quot;itcast-provider1&quot;,fallback = UserClientFallback.class)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">UserClient</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/user/findById/&#123;id&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> User <span class=\"title function_\">findById</span><span class=\"params\">(<span class=\"meta\">@PathVariable(&quot;id&quot;)</span> Long id)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>3 UserClientFallback</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserClientFallback</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">UserClient</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> User <span class=\"title function_\">findById</span><span class=\"params\">(Long id)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">User</span> <span class=\"variable\">user</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">User</span>();</span><br><span class=\"line\">        user.setUsername(<span class=\"string\">&quot;别看了,服务器忙着呢！&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> user;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"1-8-Zuul网关\"><a href=\"#1-8-Zuul网关\" class=\"headerlink\" title=\"1.8 Zuul网关\"></a>1.8 Zuul网关</h2><p>网关的 一些基本配置，如路由配置等在上面1.1节中</p>\n<h3 id=\"1-8-1-过滤器\"><a href=\"#1-8-1-过滤器\" class=\"headerlink\" title=\"1.8.1 过滤器\"></a>1.8.1 过滤器</h3><p>四种过滤类型：pre,  routing,  post,  error</p>\n<p><img src=\"https://vegetabhlimg.netlify.app/img/image-leyou-02.png\"></p>\n<p>正常路程： pre-routing-post-response</p>\n<p>异常流程</p>\n<p>1：pre或者routing出错，则直接到error,再到post,然后response结束</p>\n<p>​\t若error也出错，则到post,然后response结束</p>\n<p>​\t\t若post也出错，则就直接response结束了</p>\n<p>2:pre和routing正常，但是post异常，则走error,然后直接response结束，error及时出错不再走post了，否则就成死循环了。</p>\n<h3 id=\"1-8-2-自定义过滤器\"><a href=\"#1-8-2-自定义过滤器\" class=\"headerlink\" title=\"1.8.2 自定义过滤器\"></a>1.8.2 自定义过滤器</h3><p><img src=\"https://vegetabhlimg.netlify.app/img/image-leyou-03.png\"></p>\n<p>代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LognFilter</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">ZuulFilter</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 过滤器类型，分为四种：pre,route,post,error，这里使用pre过滤器</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">filterType</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;pre&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *过滤器的优先级，返回值越小，优先级越高，这里不设置为0，因为后续可能会设置多个过滤器</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">filterOrder</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">10</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 是否执行该过滤器</span></span><br><span class=\"line\"><span class=\"comment\">     * 返回值为true:执行run方法</span></span><br><span class=\"line\"><span class=\"comment\">     * 返回值为false:不执行run方法</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">shouldFilter</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 编写过滤器业务逻辑</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> ZuulException</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">run</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> ZuulException &#123;</span><br><span class=\"line\">        <span class=\"comment\">//初始化contex上下文对象</span></span><br><span class=\"line\">        <span class=\"type\">RequestContext</span> <span class=\"variable\">context</span> <span class=\"operator\">=</span> RequestContext.getCurrentContext();<span class=\"comment\">//注意是com.netflix.zuul.context包下  ;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//获取request对象</span></span><br><span class=\"line\">        <span class=\"type\">HttpServletRequest</span> <span class=\"variable\">request</span> <span class=\"operator\">=</span> context.getRequest();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//获取参数</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">token</span> <span class=\"operator\">=</span> request.getParameter(<span class=\"string\">&quot;token&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(StringUtils.isBlank(token))&#123;</span><br><span class=\"line\">            <span class=\"comment\">//拦截</span></span><br><span class=\"line\">            context.setSendZuulResponse(<span class=\"literal\">false</span>);</span><br><span class=\"line\">            <span class=\"comment\">//设置响应状态码，401身份未认证</span></span><br><span class=\"line\">            context.setResponseStatusCode(HttpStatus.SC_UNAUTHORIZED);</span><br><span class=\"line\">            <span class=\"comment\">//设置响应提示</span></span><br><span class=\"line\">            context.setResponseBody(<span class=\"string\">&quot;request error!&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"1-9-vue-router\"><a href=\"#1-9-vue-router\" class=\"headerlink\" title=\"1.9 vue-router\"></a>1.9 vue-router</h2><h3 id=\"1-9-1-路由vue-router示例代码\"><a href=\"#1-9-1-路由vue-router示例代码\" class=\"headerlink\" title=\"1.9.1 路由vue-router示例代码\"></a>1.9.1 路由vue-router示例代码</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">router-link</span> <span class=\"attr\">to</span>=<span class=\"string\">&quot;/login&quot;</span>&gt;</span>登录<span class=\"tag\">&lt;/<span class=\"name\">router-link</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">router-link</span> <span class=\"attr\">to</span>=<span class=\"string\">&quot;/register&quot;</span>&gt;</span>注册<span class=\"tag\">&lt;/<span class=\"name\">router-link</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">hr</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"comment\">&lt;!--这个是一个锚点--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">router-view</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-view</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;../node_modules/vue/dist/vue.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;../node_modules/vue-router/dist/vue-router.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;js/loginForm.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;js/registForm.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">const</span> router=<span class=\"keyword\">new</span> <span class=\"title class_\">VueRouter</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"comment\">//这里定义了一些路由的规则</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">       <span class=\"attr\">routes</span>:[</span></span><br><span class=\"line\"><span class=\"language-javascript\">           &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">               <span class=\"attr\">path</span>:<span class=\"string\">&quot;/login&quot;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">               <span class=\"attr\">component</span>:loginForm</span></span><br><span class=\"line\"><span class=\"language-javascript\">           &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">           &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">               <span class=\"attr\">path</span>:<span class=\"string\">&quot;/register&quot;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">               <span class=\"attr\">component</span>:registerForm</span></span><br><span class=\"line\"><span class=\"language-javascript\">           &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">       ]</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">const</span> vm=<span class=\"keyword\">new</span> <span class=\"title class_\">Vue</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">el</span>:<span class=\"string\">&quot;#app&quot;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">data</span>:&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            </span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        </span></span><br><span class=\"line\"><span class=\"language-javascript\">        router <span class=\"comment\">// 引用上面定义的router对象</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"2-0-nginx解决端口问题\"><a href=\"#2-0-nginx解决端口问题\" class=\"headerlink\" title=\"2.0 nginx解决端口问题\"></a>2.0 nginx解决端口问题</h2><h3 id=\"2-0-1-nginx作为反向代理\"><a href=\"#2-0-1-nginx作为反向代理\" class=\"headerlink\" title=\"2.0.1 nginx作为反向代理\"></a>2.0.1 nginx作为反向代理</h3><p>首先先看下什么是正向代理</p>\n<p><strong>正向代理</strong>: </p>\n<p>反向代理不好理解，<strong>正向代理</strong>大家总有用过，翻墙工具其实就是一个正向代理工具。它会把 们访问墙外服务器server的网页请求，代理到一个可以访问该网站的代理服务器proxy，这个代理服务器proxy把墙外服务器server上的网页内容获取，再转发给客户。具体的流程如下图。</p>\n<p>概括说：就是客户端和代理服务器可以直接互相访问，属于一个LAN（局域网）；代理对用户是<strong>非透明</strong>的，即用户需要自己操作或者感知得到自己的请求被发送到代理服务器；代理服务器通过<strong>代理用户端的请求</strong>来向域外服务器请求响应内容。</p>\n<p><strong>反向代理：</strong></p>\n<p>在<strong>反向代理</strong>中（事实上，这种情况基本发生在所有的大型网站的页面请求中），客户端发送的请求，想要访问server服务器上的内容。但将被发送到一个代理服务器proxy，这个代理服务器将把请求代理到和自己属于同一个LAN下的内部服务器上，而用户真正想获得的内容就储存在这些内部服务器上。看到区别了吗，这里proxy服务器代理的并不是客户，而是服务器，即向外部客户端提供了一个统一的代理入口，客户端的请求，都先经过这个proxy服务器，至于在内网真正访问哪台服务器内容，由这个proxy去控制。一般代理是指代理客户端，而这里代理的对象是服务器，这就是“反向”这个词的意思。Nginx就是来充当这个proxy的作用。 概括说：就是代理服务器和真正server服务器可以直接互相访问，属于一个LAN（服务器内网）；代理对用户是<strong>透明</strong>的，即无感知。不论加不加这个反向代理，用户都是通过相同的请求进行的，且不需要任何额外的操作；代理服务器通过<strong>代理内部服务器</strong>接受域外客户端的请求，并将请求发送到对应的内部服务器上。</p>\n<h3 id=\"2-0-2-nginx启动\"><a href=\"#2-0-2-nginx启动\" class=\"headerlink\" title=\"2.0.2 nginx启动\"></a>2.0.2 nginx启动</h3><p>nginx可以通过命令行来启动，操作命令：</p>\n<ul>\n<li>启动：<code>start nginx</code></li>\n<li>停止：<code>nginx -s stop</code></li>\n<li>重新加载：<code>nginx -s reload</code>   （每次更改配置文件后都需要重新加载下）</li>\n</ul>\n<p>启动过程会闪烁一下，启动成功后，任务管理器中会有两个nginx进程：</p>\n<p><img src=\"https://vegetabhlimg.netlify.app/img/image-leyou-04.png\"></p>\n<h3 id=\"2-0-3-请求流程\"><a href=\"#2-0-3-请求流程\" class=\"headerlink\" title=\"2.0.3 请求流程\"></a>2.0.3 请求流程</h3><ol>\n<li><p>浏览器准备发起请求，访问<a href=\"http://mamage.leyou.com,但需要进行域名解析/\">http://mamage.leyou.com，但需要进行域名解析</a></p>\n</li>\n<li><p>优先进行本地域名解析，因为我们修改了hosts，所以解析成功，得到地址：127.0.0.1</p>\n</li>\n<li><p>请求被发往解析得到的ip，并且默认使用80端口：<a href=\"http://127.0.0.1/\">http://127.0.0.1:80</a></p>\n<p>本机的nginx一直监听80端口，因此捕获这个请求</p>\n</li>\n<li><p>nginx中配置了反向代理规则，将manage.leyou.com代理到127.0.0.1:9001，因此请求被转发</p>\n</li>\n<li><p>后台系统的webpack server监听的端口是9001，得到请求并处理，完成后将响应返回到nginx</p>\n</li>\n<li><p>nginx将得到的结果返回到浏览器</p>\n</li>\n</ol>\n<h3 id=\"2-0-4-注意\"><a href=\"#2-0-4-注意\" class=\"headerlink\" title=\"2.0.4 注意\"></a>2.0.4 注意</h3><p>注意：</p>\n<p>​\t这里的nginx监听80端口是在本机，即本机的nginx一直监听80端口，捕获我们发送的请求</p>\n<p>  后台系统的webpack server监听的端口是9001，得到请求并处理，完成后将响应返回到nginx</p>\n<h2 id=\"2-1-项目启动\"><a href=\"#2-1-项目启动\" class=\"headerlink\" title=\"2.1 项目启动\"></a>2.1 项目启动</h2><h3 id=\"2-1-1-后台管理前端\"><a href=\"#2-1-1-后台管理前端\" class=\"headerlink\" title=\"2.1.1 后台管理前端\"></a>2.1.1 后台管理前端</h3><p><img src=\"https://vegetabhlimg.netlify.app/img/image-leyou-05.png\"></p>\n<p>在package.json文件中有scripts启动脚本配置，可以输入命令：<code>npm run dev</code>或者<code>npm start</code></p>\n<p><img src=\"https://vegetabhlimg.netlify.app/img/image-leyou-06.png\" alt=\"image-20211213203444687\"></p>\n<p>发现默认的端口是9001。访问：<a href=\"http://localhost:9001/\">http://localhost:9001</a></p>\n","text":"0 格式1 SpringCloud1.1 Zuul网关1234567891011121314151617server: port: 10010spring: a...","permalink":"/post/乐优商城","photos":[],"count_time":{"symbolsCount":"10k","symbolsTime":"10 mins."},"categories":[],"tags":[{"name":"Java","slug":"Java","count":3,"path":"api/tags/Java.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#0-%E6%A0%BC%E5%BC%8F\"><span class=\"toc-text\">0 格式</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-SpringCloud\"><span class=\"toc-text\">1 SpringCloud</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-1-Zuul%E7%BD%91%E5%85%B3\"><span class=\"toc-text\">1.1 Zuul网关</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-2-consumer%E6%9C%8D%E5%8A%A1%E6%B6%88%E8%B4%B9%E6%96%B9\"><span class=\"toc-text\">1.2 consumer服务消费方</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-3-registry%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83\"><span class=\"toc-text\">1.3 registry注册中心</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-4-provider%E6%9C%8D%E5%8A%A1%E6%8F%90%E4%BE%9B%E6%96%B9\"><span class=\"toc-text\">1.4 provider服务提供方</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-5-%E6%B3%A8%E6%84%8F%EF%BC%9A\"><span class=\"toc-text\">1.5 注意：</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-6-%E7%86%94%E6%96%AD\"><span class=\"toc-text\">1.6 熔断</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-6-1-%E5%BC%80%E5%90%AF%E7%86%94%E6%96%AD\"><span class=\"toc-text\">1.6.1 开启熔断</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-6-2%E7%BC%96%E5%86%99%E9%99%8D%E7%BA%A7%E9%80%BB%E8%BE%91%EF%BC%88%E8%BF%99%E9%87%8C%E5%8F%AF%E4%BB%A5%E7%9D%80%E9%87%8D%E7%9C%8B%E4%B8%8B%E4%B8%80%E8%8A%82feign%EF%BC%8C%E5%B0%86%E5%85%B6%E5%90%88%E5%9C%A8%E4%B8%80%E8%B5%B7%E5%86%99%E4%BA%86%EF%BC%89\"><span class=\"toc-text\">1.6.2编写降级逻辑（这里可以着重看下一节feign，将其合在一起写了）</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-6-3-%E8%AE%BE%E7%BD%AE%E8%B6%85%E6%97%B6\"><span class=\"toc-text\">1.6.3 设置超时</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-7-Feign\"><span class=\"toc-text\">1.7 Feign</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-7-1-%E5%BC%80%E5%90%AFFeign%E5%8A%9F%E8%83%BD\"><span class=\"toc-text\">1.7.1 开启Feign功能</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-7-2-Feign%E7%9A%84%E5%AE%A2%E6%88%B7%E7%AB%AF\"><span class=\"toc-text\">1.7.2 Feign的客户端</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-7-2-1%E5%86%85%E5%AE%B9\"><span class=\"toc-text\">1.7.2.1内容</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-8-Zuul%E7%BD%91%E5%85%B3\"><span class=\"toc-text\">1.8 Zuul网关</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-8-1-%E8%BF%87%E6%BB%A4%E5%99%A8\"><span class=\"toc-text\">1.8.1 过滤器</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-8-2-%E8%87%AA%E5%AE%9A%E4%B9%89%E8%BF%87%E6%BB%A4%E5%99%A8\"><span class=\"toc-text\">1.8.2 自定义过滤器</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-9-vue-router\"><span class=\"toc-text\">1.9 vue-router</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-9-1-%E8%B7%AF%E7%94%B1vue-router%E7%A4%BA%E4%BE%8B%E4%BB%A3%E7%A0%81\"><span class=\"toc-text\">1.9.1 路由vue-router示例代码</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-0-nginx%E8%A7%A3%E5%86%B3%E7%AB%AF%E5%8F%A3%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">2.0 nginx解决端口问题</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-0-1-nginx%E4%BD%9C%E4%B8%BA%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86\"><span class=\"toc-text\">2.0.1 nginx作为反向代理</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-0-2-nginx%E5%90%AF%E5%8A%A8\"><span class=\"toc-text\">2.0.2 nginx启动</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-0-3-%E8%AF%B7%E6%B1%82%E6%B5%81%E7%A8%8B\"><span class=\"toc-text\">2.0.3 请求流程</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-0-4-%E6%B3%A8%E6%84%8F\"><span class=\"toc-text\">2.0.4 注意</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-1-%E9%A1%B9%E7%9B%AE%E5%90%AF%E5%8A%A8\"><span class=\"toc-text\">2.1 项目启动</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-1-1-%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86%E5%89%8D%E7%AB%AF\"><span class=\"toc-text\">2.1.1 后台管理前端</span></a></li></ol></li></ol>","author":{"name":"Vegetabhl","slug":"blog-author","avatar":"https://raw.githubusercontent.com/Vegetabhl/Images/master/img/avatar_1.jpg","link":"/","description":"--欢迎来到小卜同学的小破站--     Welcome to Xiaobu’s little website","socials":{"github":"https://github.com/Vegetabhl","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/398361872"},"wechat":{"icon":"/svg/wx.svg","link":"https://raw.githubusercontent.com/Vegetabhl/Images/master/img/wx.jpg"}}}},"mapped":true,"hidden":false,"prev_post":{"title":"Python","uid":"7d84a4176eacfd91fe4b92da8af8cc6a","slug":"Python","date":"2020-12-03T16:00:00.000Z","updated":"2024-05-29T15:20:50.828Z","comments":true,"path":"api/articles/Python.json","keywords":null,"cover":[],"text":"0 格式格式要求如下： 在索引和内容之间需要加一个空格，包括所有级索引、标题和内容。 内容顶格书写 所有级标题之间需要添加一行空白行 正文段落首行缩进，但是对于...","permalink":"/post/Python","photos":[],"count_time":{"symbolsCount":"28k","symbolsTime":"26 mins."},"categories":[],"tags":[{"name":"Python","slug":"Python","count":6,"path":"api/tags/Python.json"}],"author":{"name":"Vegetabhl","slug":"blog-author","avatar":"https://raw.githubusercontent.com/Vegetabhl/Images/master/img/avatar_1.jpg","link":"/","description":"--欢迎来到小卜同学的小破站--     Welcome to Xiaobu’s little website","socials":{"github":"https://github.com/Vegetabhl","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/398361872"},"wechat":{"icon":"/svg/wx.svg","link":"https://raw.githubusercontent.com/Vegetabhl/Images/master/img/wx.jpg"}}}}},"next_post":{}}