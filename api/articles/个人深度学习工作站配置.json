{"title":"个人深度学习工作站配置","uid":"81dd16a88c7b3bab33afb0177c60d050","slug":"个人深度学习工作站配置","date":"2022-09-23T10:49:36.000Z","updated":"2024-06-07T12:29:53.644Z","comments":true,"path":"api/articles/个人深度学习工作站配置.json","keywords":null,"cover":"https://vegetabhlimg.netlify.app/img/57f951ee01884227a4bff98600fb85b0_0.png","content":"<h2 id=\"1-个人深度学习工作站\"><a href=\"#1-个人深度学习工作站\" class=\"headerlink\" title=\"1. 个人深度学习工作站\"></a>1. 个人深度学习工作站</h2><p>详情从第二章开始</p>\n<h2 id=\"2-系统篇\"><a href=\"#2-系统篇\" class=\"headerlink\" title=\"2. 系统篇\"></a><strong>2. 系统篇</strong></h2><p>系统选择 DL 开发里面最常用的 Ubuntu，最新的稳定版本是 20.04，安装过程需要准备一个 U 盘作为系统启动盘。</p>\n<h3 id=\"2-1-安装-Ubuntu-20-04-系统\"><a href=\"#2-1-安装-Ubuntu-20-04-系统\" class=\"headerlink\" title=\"2.1 安装 Ubuntu 20.04 系统\"></a><strong>2.1 安装 Ubuntu 20.04 系统</strong></h3><ol>\n<li>在官网下载 Ubuntu 镜像：<a href=\"http://releases.ubuntu.com/20.04/\">Ubuntu 20.04.1 LTS (Focal Fossa)</a>，选择 <strong>Desktop Image</strong> 版本，得到. iso 的镜像文件。</li>\n<li>Windows 下使用 UltraISO 工具打开. iso 镜像文件，并将其写入到一个 U 盘，得到系统启动盘：</li>\n</ol>\n<p><img src=\"https://vegetabhlimg.netlify.app/img/v2-e855db3eae9e9598ce5bb85e3342918d_r.jpg\"></p>\n<ol start=\"3\">\n<li>将 U 盘插到服务器上，开机按<code>del键</code>（具体什么键跟主板型号有关）选择启动项进入临时的 Ubuntu 系统，在图形界面中选择 <strong>Install Ubuntu</strong>，所有配置都可以使用默认的，改一下用户名和密码即可。 这里建议使用英文作为默认语言，省得给自己日后开发找麻烦哈。</li>\n</ol>\n<p><img src=\"https://vegetabhlimg.netlify.app/img/v2-a762ee52a96a67fb2fcd3ab32edda3ce_r.jpg\"></p>\n<p>安装过程中会联网下载一些软件包更新，可以直接点 skip 掉，在安装好系统之后再手动更新也是一样的。</p>\n<ol start=\"4\">\n<li>进入系统后设置一下 root 账户密码：</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo passwd root</span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>同时为了避免每次 sudo 都要输入密码，这里配置一下<code>visudo</code>：</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo visudo</span><br></pre></td></tr></table></figure>\n\n<p>在文件最后加上一句（改为自己的用户名）：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pengzhihui ALL=(ALL) NOPASSWD: ALL</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-2-配置国内镜像软件源\"><a href=\"#2-2-配置国内镜像软件源\" class=\"headerlink\" title=\"2.2 配置国内镜像软件源\"></a><strong>2.2 配置国内镜像软件源</strong></h3><p>为了提升后续安装软件时的幸福感，第一步当然先要替换一下软件源。</p>\n<ol>\n<li>备份原来的源：</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp /etc/apt/sources.list /etc/apt/sources.list.bak</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>将源的内容设置为阿里云镜像：</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vim /etc/apt/sources.list</span><br></pre></td></tr></table></figure>\n\n<p>内容改为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deb http://mirrors.aliyun.com/ubuntu/ focal main restricted universe multiverse</span><br><span class=\"line\"> deb-src http://mirrors.aliyun.com/ubuntu/ focal main restricted universe multiverse</span><br><span class=\"line\"> deb http://mirrors.aliyun.com/ubuntu/ focal-security main restricted universe multiverse</span><br><span class=\"line\"> deb-src http://mirrors.aliyun.com/ubuntu/ focal-security main restricted universe multiverse</span><br><span class=\"line\"> deb http://mirrors.aliyun.com/ubuntu/ focal-updates main restricted universe multiverse</span><br><span class=\"line\"> deb-src http://mirrors.aliyun.com/ubuntu/ focal-updates main restricted universe multiverse</span><br><span class=\"line\"> deb http://mirrors.aliyun.com/ubuntu/ focal-proposed main restricted universe multiverse</span><br><span class=\"line\"> deb-src http://mirrors.aliyun.com/ubuntu/ focal-proposed main restricted universe multiverse</span><br><span class=\"line\"> deb http://mirrors.aliyun.com/ubuntu/ focal-backports main restricted universe multiverse</span><br><span class=\"line\"> deb-src http://mirrors.aliyun.com/ubuntu/ focal-backports main restricted universe multiverse</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>更新软件列表：</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt update</span><br><span class=\"line\">sudo apt upgrade</span><br></pre></td></tr></table></figure>\n\n<p>也可以去网上搜其他镜像，在我这边经测试阿里云是最快的。另外也可以在图形桌面环境下打开<code>Software &amp; Updates</code>软件，在里面也有网速测试并选择最佳源的功能。</p>\n<h3 id=\"2-3-安装-Python-和-pip\"><a href=\"#2-3-安装-Python-和-pip\" class=\"headerlink\" title=\"2.3 安装 Python 和 pip\"></a><strong>2.3 安装 Python 和 pip</strong></h3><ol>\n<li>Ubuntu 系统默认自带 python，有版本需求的话也可以自己安装一下（不安装也行因为后面会安装 conda 环境）：</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install python3</span><br><span class=\"line\">sudo apt install python3-pip</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>不管是不是自己安装的 python，替换 python 的 pip 源建议是一定操作一下的，pip 安装速度会快很多：</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd ~</span><br><span class=\"line\">mkdir .pip</span><br></pre></td></tr></table></figure>\n\n<p>直接新建并编辑 pip.conf：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vim ~/.pip/pip.conf</span><br></pre></td></tr></table></figure>\n\n<p>改为以下内容（这里用的清华源，也可以试一下阿里、豆瓣等源）：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[global]</span><br><span class=\"line\">index-url = https://pypi.tuna.tsinghua.edu.cn/simple/ </span><br><span class=\"line\">[install]</span><br><span class=\"line\">trusted-host = pypi.tuna.tsinghua.edu.cn</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>更改默认 python 版本，python 目录默认链接的是 python2，而现在基本都是用 python3 开发了，每次都输入 python3 很麻烦所以这里直接更换默认的 python 命令链接。</li>\n</ol>\n<p>把原来的 python 软链接删掉：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo rm /usr/bin/python</span><br></pre></td></tr></table></figure>\n\n<p>新建一个软链接：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ln -s /usr/bin/python3 /usr/bin/python</span><br><span class=\"line\">sudo ln -s /usr/bin/pip3 /usr/bin/pip</span><br></pre></td></tr></table></figure>\n\n<p>现在输入 python 就会进入 python3 环境了。</p>\n<h3 id=\"2-4-配置-SSH-远程桌面\"><a href=\"#2-4-配置-SSH-远程桌面\" class=\"headerlink\" title=\"2.4 配置 SSH &amp; 远程桌面\"></a><strong>2.4 配置 SSH &amp; 远程桌面</strong></h3><p>纯净安装的系统里面默认没有开启 SSH，我们手动安装一下。</p>\n<ol>\n<li>安装 ssh：</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install ssh</span><br></pre></td></tr></table></figure>\n\n<p>会自动安装好很多依赖包并启动服务，完成之后用 XShell 等软件就可以 SSH 登录服务器了。</p>\n<ol start=\"2\">\n<li>安装 xrdp</li>\n</ol>\n<p>Xrdp 是一个微软远程桌面协议（RDP）的开源实现，它允许我们通过图形界面控制远程系统。这里使用 RDP 而不是 VNC 作为远程桌面，是因为 Windows 自带的远程桌面连接软件就可以连接很方便，另外 RDP 在 Windows 下的体验非常好，包括速度很快（因为压缩方案做得比较好），可以直接在主机和远程桌面之间复制粘贴等等。</p>\n<p><img src=\"https://vegetabhlimg.netlify.app/img/v2-0db7f2c872ffbd2fe4f86caa81f37a26_r.jpg\"></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>有的 Xwindow 软件是不太兼容 xrdp 的（比如 ubuntu 18.04 的默认桌面），但是 ubuntu 20.04 使用的 Gnome 是完全 ok 的。</p></blockquote>\n<p>安装过程如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install xrdp</span><br></pre></td></tr></table></figure>\n\n<p>安装完成 xrdp 服务将会自动启动，可以输入下面的命令验证它：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl status xrdp</span><br></pre></td></tr></table></figure>\n\n<p>默认情况下，xrdp 使用<code>/etc/ssl/private/ssl-cert-snakeoil.key</code>，它仅仅对 ssl-cert 用户组成语可读，所以需要运行下面的命令，将 xrdp 用户添加到这个用户组：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo adduser xrdp ssl-cert  </span><br><span class=\"line\">sudo systemctl restart xrdp</span><br></pre></td></tr></table></figure>\n\n<p>然后使用 Windows 自带的远程桌面软件连接服务器 IP 地址或者域名就行了。</p>\n<h3 id=\"2-5-安装-frp-进行内网穿透\"><a href=\"#2-5-安装-frp-进行内网穿透\" class=\"headerlink\" title=\"2.5 安装 frp 进行内网穿透\"></a><strong>2.5 安装 frp 进行内网穿透</strong></h3><p>前面介绍的 SSH 和远程桌面都是需要在局域网下通过 IP 地址进行连接的，而我们配置一台服务器最重要的诉求，应该是可以<strong>随时随地</strong>去访问服务器。</p>\n<p>那在家里面，网络运营商提供的网络服务通过路由器路由到各个设备，此时路由器会同时具备内网地址（路由器之内，局域网，LAN，也就是 192.168.x.x）和外网地址（路由器之外，互联网，WAN）。但是其实这个 WAN 口的 IP 并不是真正的 “公网 IP”，而时经过了多层的 NAT 转换之后的地址，外网的设备是不能通过这个地址访问到路由器的。这个问题的原因是 ipv4 地址池紧张，如果运营商给每家的路由器都安排一个公网 ip 的话，那 ip 地址早就不够用了呀。</p>\n<p>因此为了能让外网访问到我们局域网内的设备，就需要跟中国电信等运营商申请公网 ip（现在能申请到的概率也已经不大了，而且即使申请到也不是所有端口都可以使用的），或者我们自己动手做一些操作来达到同样的目的。</p>\n<p>有几种方法:</p>\n<ul>\n<li>可以直接用类似<a href=\"https://hsk.oray.com/\">花生壳</a>这样的 DDNS 服务平台做转发实现内网穿透，优点是比较简单稳定，缺点是需要持续付费，而且速度和延迟效果一般，而且每加一个端口都要额外付费。</li>\n<li>也可以像我一样使用 frp 之类的软件做反向代理来实现内网穿透，这个方案也是需要你有一台带公网 IP 的云服务器的，优点就是完全可控，自己想配置多少个端口的穿透都可以，速度跟你的云服务器带宽有关。</li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>为什么需要多个端口？ 是因为不同应用占用的端口不同，比如我们的 SSH 走的是 22 号端口，而远程桌面的 rdp 走的是 3389 号端口，如果需要自建 Web 服务的话则是走 80&#x2F;443 端口、想把工作站作为上外网的代理服务器的话会需要 1080 端口等等… 所以用上面第二个方案显然会方便很多，而且云服务器也不贵，我在腾讯云上购买一年只要 200 左右。</p></blockquote>\n<p>下面介绍如何安装配置 frp：</p>\n<p>frp 分为 frps（server）和 frpc（client）两个包 ，其中前者安装到我们的云服务器上，后者安装在需要被外网访问到的各个设备上，这里就是指我们的深度学习工作站。</p>\n<p><strong>云服务器端：</strong></p>\n<p>去<a href=\"https://github.com/fatedier/frp/releases\">这里</a>下载适合你服务器系统的 frp 软件，我这里是用的是腾讯云 64 位 Ubuntu16.04 所以选择 <a href=\"https://github.com/fatedier/frp/releases/download/v0.34.3/frp_0.34.3_linux_amd64.tar.gz\">frp_0.34.3_linux_amd64.tar.gz</a>，下好之后解压：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -zxvf frp_0.34.3_linux_amd64.tar.gz</span><br></pre></td></tr></table></figure>\n\n<p>我们需要编辑的文件是 frps.ini :</p>\n<p>内容改为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[common]</span><br><span class=\"line\"> bind_port = 7000 # frp服务的端口号，可以自己定</span><br><span class=\"line\"> dashboard_port = 7500 # frp的web界面的端口号</span><br><span class=\"line\"> dashboard_user = user # web界面的登陆账户，自己修改</span><br><span class=\"line\"> dashboard_pwd = pass # web界面的登陆密码，自己修改</span><br><span class=\"line\"> authentication_method = token</span><br><span class=\"line\"> token = xxxxx # frp客户端连接时的密码，自己修改</span><br></pre></td></tr></table></figure>\n\n<p>保存配置后，使用该命令启动：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./frps -c ./frps.ini</span><br></pre></td></tr></table></figure>\n\n<p>在浏览器输入 <code>[云服务器的公网ip]:7500</code> 即可访问到 frp 的 web 管理界面。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>注意，可能需要去云服务器控制台配置安全组规则 开放以上涉及到的端口，否则无法访问。</p></blockquote>\n<p><strong>本地的深度学习服务器端：</strong></p>\n<ol>\n<li>下载相应版本的 frpc 软件包（跟刚刚一样的）：<a href=\"https://github.com/fatedier/frp/releases\">Releases · fatedier&#x2F;frp (github.com)</a>，这里选 amd64 的，下好之后解压到一个临时文件夹。</li>\n<li>修改 frpc.ini 配置文件，内容如下：</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[common]</span><br><span class=\"line\"> server_addr = xx.xx.xx.xx # 你的云服务器的公网ip</span><br><span class=\"line\"> authentication_method = token</span><br><span class=\"line\"> token = xxxxx # 刚刚配置的frp连接密码 </span><br><span class=\"line\"> server_port = 7000 # 刚刚配置的frp服务端口</span><br><span class=\"line\"> ​</span><br><span class=\"line\"> [Fusion-ssh]</span><br><span class=\"line\"> type = tcp</span><br><span class=\"line\"> local_ip = 127.0.0.1</span><br><span class=\"line\"> local_port = 22</span><br><span class=\"line\"> remote_port = 20022</span><br><span class=\"line\"> ​</span><br><span class=\"line\"> [Fusion-rdp]</span><br><span class=\"line\"> type = tcp</span><br><span class=\"line\"> local_ip = 127.0.0.1</span><br><span class=\"line\"> local_port = 3389</span><br><span class=\"line\"> remote_port = 23389</span><br></pre></td></tr></table></figure>\n\n<p>通过上面的脚本就可以把对于云服务器特定端口的访问给重定向到本地服务器的某个端口了，简单地讲就是：假如我用 SSH 客户端访问 <code>[云服务器ip]:20022</code>，就可以经过反向代理直接访问到<code>[本地的训练服务器ip]:22</code>；同理需要连接远程桌面的话，只需要访问<code>[云服务器ip]:23389</code>就可以了。</p>\n<p><strong>当然你也可以修改脚本添加更多映射~</strong></p>\n<ol start=\"3\">\n<li>添加开机自动启动的脚本，新建一个文件内容如下：</li>\n</ol>\n<p>文件名<code>/etc/systemd/system/frpc.service</code>，注意修改其中的路径：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Fusion]</span><br><span class=\"line\"> Description=Frp Server Daemon</span><br><span class=\"line\"> After=syslog.target network.target</span><br><span class=\"line\"> Wants=network.target</span><br><span class=\"line\"> ​</span><br><span class=\"line\"> [Service]</span><br><span class=\"line\"> Type=simple</span><br><span class=\"line\"> ExecStart=/usr/local/bin/frp/frpc -c /usr/local/bin/frp/frpc.ini # 修改为你的frp实际安装目录</span><br><span class=\"line\"> ExecStop=/usr/bin/killall frpc</span><br><span class=\"line\"> #启动失败1分钟后再次启动</span><br><span class=\"line\"> RestartSec=1min</span><br><span class=\"line\"> KillMode=control-group</span><br><span class=\"line\"> #重启控制：总是重启</span><br><span class=\"line\"> Restart=always</span><br><span class=\"line\"> ​</span><br><span class=\"line\"> [Install]</span><br><span class=\"line\"> WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>\n\n<p>然后执行以下命令启用脚本：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl enable frpc.service</span><br><span class=\"line\">sudo systemctl start frpc.service</span><br></pre></td></tr></table></figure>\n\n<p>通过下面的命令查看服务状态，如果是 running 的话就说明可以了：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl status frpc.service</span><br></pre></td></tr></table></figure>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>这里顺便提一下，按照习惯一般把上面的 frp 软件解压防止在<code>/usr/local/bin</code>目录下。Linux 的软件安装目录是也是有讲究的，理解这一点，在对系统管理是有益的</p></blockquote>\n<ul>\n<li><code>/usr</code>：系统级的目录，可以理解为<code>C:/Windows/</code></li>\n<li><code>/usr/lib</code>：可以理解为<code>C:/Windows/System32</code></li>\n<li><code>/usr/local</code>：用户级的程序目录，可以理解为<code>C:/Progrem Files/</code>，用户自己编译的软件默认会安装到这个目录下</li>\n<li><code>/opt</code>：用户级的程序目录，可以理解为<code>D:/Software</code>，opt 有可选的意思，这里可以用于放置第三方大型软件（或游戏），当你不需要时，直接<code>rm -rf</code>掉即可。在硬盘容量不够时，也可将<code>/opt</code>单独挂载到其他磁盘上使用</li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>源码放哪里？</p></blockquote>\n<ul>\n<li><code>/usr/src</code>：系统级的源码目录</li>\n<li><code>/usr/local/src</code>：用户级的源码目录。</li>\n</ul>\n<h3 id=\"2-6-安装-SAMBA-服务\"><a href=\"#2-6-安装-SAMBA-服务\" class=\"headerlink\" title=\"2.6 安装 SAMBA 服务\"></a><strong>2.6 安装 SAMBA 服务</strong></h3><p><strong>如果能把服务器上的磁盘直接挂载到我们使用的 Windows 个人 PC 上是不是很爽？</strong></p>\n<p>如开头的视频里面演示的，可以通过建立局域网 SAMBA 服务来实现这个效果：</p>\n<ol>\n<li>安装<code>samba</code> 和<code>samba-common-bin</code></li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install samba samba-common-bin</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>配置 &#x2F; etc&#x2F;samba&#x2F;smb.conf 文件</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo nano /etc/samba/smb.conf</span><br></pre></td></tr></table></figure>\n\n<p>在最后一行后面加入：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 共享文件夹显示的名称</span><br><span class=\"line\">[home]</span><br><span class=\"line\"># 说明信息</span><br><span class=\"line\">comment = Fusion WorkStation Storage</span><br><span class=\"line\"># 可以访问的用户</span><br><span class=\"line\">valid users = pengzhihui,root</span><br><span class=\"line\"># 共享文件的路径</span><br><span class=\"line\">path = /home/pengzhihui/</span><br><span class=\"line\"># 可被其他人看到资源名称（非内容）</span><br><span class=\"line\">browseable = yes</span><br><span class=\"line\"># 可写</span><br><span class=\"line\">writable = yes</span><br><span class=\"line\"># 新建文件的权限为 664</span><br><span class=\"line\">create mask = 0664</span><br><span class=\"line\"># 新建目录的权限为 775</span><br><span class=\"line\">directory mask = 0775</span><br></pre></td></tr></table></figure>\n\n<p>可以把配置文件中你不需要的分享名称删除，例如 [homes], [printers] 等。</p>\n<p>运行这个命令测试一下配置文件是否有错误，根据提示做相应修改：<code>testparm</code></p>\n<ol start=\"3\">\n<li>添加登陆账户并创建密码</li>\n</ol>\n<p>必须是 linux 已存在的用户：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo smbpasswd -a pi</span><br></pre></td></tr></table></figure>\n\n<p>然后重启服务即可：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo /etc/init.d/samba-ad-dc restart</span><br></pre></td></tr></table></figure>\n\n<p>接下来可以在 Windows 的网络中发现设备了：</p>\n<p><img src=\"https://vegetabhlimg.netlify.app/img/v2-3fd60419ccba18023a1d25f221089bd1_r.jpg\"></p>\n<p>但是可能会出现无法点开的情况，这里需要在 Windows 的凭据管理器中添加账户信息（开始菜单里搜索凭据管理器即可打开），点击添加 Windows 凭据，输入你的服务器名称和账户密码：</p>\n<p><img src=\"https://vegetabhlimg.netlify.app/img/v2-3ec12f97d892d60b9a6f07e568ec64f9_r.jpg\"></p>\n<p>接下来就可以点进去看到服务器上的文件了。 为了更加方便地进行文件交互，我们添加对应的磁盘到 Windows 资源管理器的此电脑中：</p>\n<p><img src=\"https://vegetabhlimg.netlify.app/img/v2-ab65bd0983971c9c23c9f7b98f1b1599_r.jpg\"></p>\n<p>选择刚刚服务器的网络路径即可添加：</p>\n<p><img src=\"https://vegetabhlimg.netlify.app/img/v2-c54912cf0729235850d0f404a769b196_r.jpg\"></p>\n<h2 id=\"3-DL-开发环境配置篇\"><a href=\"#3-DL-开发环境配置篇\" class=\"headerlink\" title=\"3. DL 开发环境配置篇\"></a><strong>3. DL 开发环境配置篇</strong></h2><p>配置这台服务器的主要作用就是做深度学习训练，所以 GPU 相关的驱动和环境时肯定要安排好的，网上资料很多很杂，这里梳理出了最便捷可靠的安装方法供大家参考~</p>\n<h3 id=\"3-1-安装-Nvidia-显卡驱动\"><a href=\"#3-1-安装-Nvidia-显卡驱动\" class=\"headerlink\" title=\"3.1 安装 Nvidia 显卡驱动\"></a><strong>3.1 安装 Nvidia 显卡驱动</strong></h3><p>最简单的方式是通过系统的软件与更新来安装：</p>\n<ol>\n<li>进入系统的图形桌面，打开<code>Software &amp; Updates</code>软件，可以看到标签栏有一个<code>Additional Drivers</code>：</li>\n</ol>\n<p><img src=\"https://vegetabhlimg.netlify.app/img/v2-cc2c0c148b22801cc4f4eb901a95879b_r.jpg\"></p>\n<p>选择第一个安装 Nvidia 官方驱动（第二个是开源驱动）即可，根据网络情况稍等大概十分钟，安装完重启服务器。</p>\n<ol>\n<li>重启完之后更新一下软件：</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt update</span><br><span class=\"line\">sudo apt upgrade</span><br></pre></td></tr></table></figure>\n\n<p>这里会连带 Nvidia 的驱动一起升级一遍，更新到最新的驱动；更新完可能会出现 nvidia-smi 命令报错，再重启一下就解决了。</p>\n<h3 id=\"3-2-安装-CUDA\"><a href=\"#3-2-安装-CUDA\" class=\"headerlink\" title=\"3.2 安装 CUDA\"></a><strong>3.2 安装 CUDA</strong></h3><p>如果之前安装了旧版本的 cuda 和 cudnn 的话，需要先卸载后再安装：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get remove --purge nvidia*</span><br></pre></td></tr></table></figure>\n\n<p>然后<strong>按照前面的方法重新安装显卡驱动</strong>，安装好了之后开始安装 CUDA：</p>\n<ol>\n<li>去官网下载 cuda 安装包：<a href=\"https://developer.nvidia.com/cuda-11.0-download-archive\">CUDA Toolkit 11.0 Download | NVIDIA Developer</a>，相关选项如下（根据实际情况选择）：</li>\n</ol>\n<p><img src=\"https://vegetabhlimg.netlify.app/img/v2-667ab3e5e1f8de904b454bbb56c25b4a_r.jpg\"></p>\n<ol>\n<li>运行下面的命令进行安装：</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod +x cuda_11.0.2_450.51.05_linux.run</span><br><span class=\"line\">sudo sh ./cuda_11.0.2_450.51.05_linux.run</span><br></pre></td></tr></table></figure>\n\n<p>可能会报一个警告：</p>\n<p><img src=\"https://vegetabhlimg.netlify.app/img/v2-ffbf901af98e48003991dc72428a6823_r.jpg\"></p>\n<p>前面已经卸载过旧版本了直接 Continue 就好。然后根据提示选择安装选项，注意不要勾选第一个安装显卡驱动的，因为之前已经安装过了。 安装完成后提示</p>\n<p><img src=\"https://vegetabhlimg.netlify.app/img/v2-756a4bd5e7b8df867b2afd6190f052b2_r.jpg\"></p>\n<ol start=\"2\">\n<li>根据上图提示需要配置环境变量：</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nano  ~/.bashrc</span><br></pre></td></tr></table></figure>\n\n<p>再文件最后加入以下语句：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export CUDA_HOME=/usr/local/cuda-11.0</span><br><span class=\"line\">export LD_LIBRARY_PATH=$&#123;CUDA_HOME&#125;/lib64</span><br><span class=\"line\">export PATH=$&#123;CUDA_HOME&#125;/bin:$&#123;PATH&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后使其生效：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source ~/.bashrc</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>可以使用命令<code>nvcc -V</code>查看安装的版本信息：</li>\n</ol>\n<p><img src=\"https://vegetabhlimg.netlify.app/img/image-20240607202858046.png\" alt=\"image-20240607202858046\"></p>\n<p>也可以编译一个程序测试安装是否成功，执行以下几条命令：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd ~/Softwares/cuda/NVIDIA_CUDA-11.0_Samples/1_Utilities/deviceQuery</span><br><span class=\"line\"> make</span><br><span class=\"line\">./deviceQuery</span><br></pre></td></tr></table></figure>\n\n<p>正常的话会有相应输出，打印显卡的信息。</p>\n<h3 id=\"3-3-安装-CuDNN\"><a href=\"#3-3-安装-CuDNN\" class=\"headerlink\" title=\"3.3 安装 CuDNN\"></a><strong>3.3 安装 CuDNN</strong></h3><p>进入到 CUDNN 的下载官网：<a href=\"https://developer.nvidia.com/rdp/cudnn-download\">cuDNN Download | NVIDIA Developer</a>，然点击 Download 开始选择下载版本，当然在下载之前还有登录，选择版本界面如下：</p>\n<p><img src=\"https://vegetabhlimg.netlify.app/img/image-20240607202935464.png\" alt=\"image-20240607202935464\"></p>\n<p>我们选择和之前 cuda 版本对应的 cudnn 版本：</p>\n<p><img src=\"https://vegetabhlimg.netlify.app/img/v2-e4c256e6cee42ba18a2c01de6c3798e4_r.jpg\"></p>\n<p>下载之后是一个压缩包，对它进行解压，命令如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -xzvf cudnn-11.0-linux-x64-v8.0.5.39.tgz</span><br></pre></td></tr></table></figure>\n\n<p>使用以下两条命令复制这些文件到 CUDA 目录下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo cp cuda/lib64/* /usr/local/cuda-11.0/lib64/</span><br><span class=\"line\"> sudo cp cuda/include/* /usr/local/cuda-11.0/include/</span><br></pre></td></tr></table></figure>\n\n<p>拷贝完成之后，可以使用以下命令查看 CUDNN 的版本信息：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat /usr/local/cuda/include/cudnn_version.h | grep CUDNN_MAJOR -A 2</span><br></pre></td></tr></table></figure>\n\n<p>可以看到版本信息如下，为<code>8.0.5</code>：</p>\n<p><img src=\"https://vegetabhlimg.netlify.app/img/v2-61030edf86acd862ac404470b05988c5_r.jpg\"></p>\n<h3 id=\"3-4-安装-Conda-环境\"><a href=\"#3-4-安装-Conda-环境\" class=\"headerlink\" title=\"3.4 安装 Conda 环境\"></a><strong>3.4 安装 Conda 环境</strong></h3><p>不同的训练框架和版本可能会需要不同的 python 版本相对应，而且有的包比如 numpy 也对版本有要求，所以比较优雅的方法是给每个配置建立一个<strong>虚拟的 python 环境</strong>，在需要的时候可以随时切换，而不需要的时候也能删除不浪费磁盘资源，那在这方面 conda 是做得最好的。</p>\n<p>下面介绍怎么安装 conda：</p>\n<ol>\n<li>在 Anaconda 官网下载 Linux 安装包：<a href=\"https://www.anaconda.com/products/individual\">Anaconda | Individual Edition</a></li>\n<li>运行下面的命令安装：</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod +x Anaconda3-2020.11-Linux-x86_64.sh</span><br><span class=\"line\"></span><br><span class=\"line\">./Anaconda3-2020.11-Linux-x86_64.sh</span><br></pre></td></tr></table></figure>\n\n<p>一路按 ENTER 确认，然后根据提示输入 yes，这里我为了目录整洁不安装在默认路径，设置为下面的路径：<code>/home/pengzhihui/Softwares/anaconda</code></p>\n<p>然后会询问你是否要初始化 conda，输入 yes 确认，重开终端窗口之后，就可以看到 conda 环境可用了（base 代表默认环境）：</p>\n<p><img src=\"https://vegetabhlimg.netlify.app/img/v2-04f7dfb003d62d7db188bd6cd0188f6c_r.jpg\"></p>\n<p><strong>conda 的使用方法网上搜一下有很多，这里就不赘述了。</strong></p>\n<h3 id=\"3-5-安装-Nvidia-Docker\"><a href=\"#3-5-安装-Nvidia-Docker\" class=\"headerlink\" title=\"3.5 安装 Nvidia-Docker\"></a><strong>3.5 安装 Nvidia-Docker</strong></h3><p>Docker 也是虚拟化环境的神器，前面说的 conda 虽然可以提供 python 的虚拟环境并方便地切换，但是有的时候我们的开发环境并不只是用到 python，比如有的 native 库需要对应 gcc 版本的编译环境，或者进行交叉编译时哟啊安装很多工具链等等。如果这些操作都在服务器本地上进行，那时间久了就会让服务器的文件系统非常杂乱，而且还会遇到各种软件版本冲突问题。</p>\n<p>Docker 就可以很好地解决这些问题，它其实可以理解为就是一个非常轻量化的虚拟机，我们可以在宿主服务器上新建很多个这种被称为<code>容器</code>的虚拟机，然后在里面配置我们的开发环境，且这些配置好的环境是可以打包成<code>镜像</code>的，方便随时做分享和重用；不需要的时候，我们直接删除容器就好了，其资源是和我们的服务器宿主机完全隔离的。</p>\n<p>Docker 的具体使用可以自己搜索一下很多教程，这里主要介绍如何把 GPU 暴露给 Docker 的容器（因为大家都知道像是 VMware 这种虚拟机里面都是无法共享宿主机的 GPU 的），是通过<code>nvidia-docker</code>实现的。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>以前为了配置 nvidia-docker，需要安装完 docker 之后再安装单独的 nvidia docker2，而现在只需要安装 nvidia container toolkit 即可，更加方便了。</p></blockquote>\n<ol>\n<li>docker 安装 官网上有详细的介绍：<a href=\"https://docs.docker.com/engine/install/ubuntu/\">Install Docker Engine on Ubuntudocs.docker.com</a> 或者运行下面的命令安装：</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install docker.io</span><br><span class=\"line\">systemctl start docker</span><br><span class=\"line\">systemctl enable docker</span><br></pre></td></tr></table></figure>\n\n<p>可以运行这条命令检查是否安装成功：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker version</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>安装 NVIDIA Container Toolkit</li>\n</ol>\n<p><img src=\"https://vegetabhlimg.netlify.app/img/v2-d14822f24718d0c322ddf0a42c976c94_b.jpg\"></p>\n<p>官网安装步骤：<a href=\"https://github.com/NVIDIA/nvidia-docker\">NVIDIA&#x2F;nvidia-docker: Build and run Docker containers leveraging NVIDIA GPUs (github.com)</a> 或者直接运行下面的命令：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">##首先要确保已经安装了nvidia driver</span><br><span class=\"line\"> # 2. 添加源</span><br><span class=\"line\"> distribution=$(. /etc/os-release;echo $ID$VERSION_ID)</span><br><span class=\"line\"> curl -s -L https://nvidia.github.io/nvidia-docker/gpgkey | sudo apt-key add -</span><br><span class=\"line\"> curl -s -L https://nvidia.github.io/nvidia-docker/$distribution/nvidia-docker.list | sudo tee /etc/apt/sources.list.d/nvidia-docker.list</span><br><span class=\"line\"> ​</span><br><span class=\"line\"> # 2. 安装并重启</span><br><span class=\"line\"> sudo apt-get update &amp;&amp; sudo apt-get install -y nvidia-container-toolkit</span><br><span class=\"line\"> sudo systemctl restart docker</span><br></pre></td></tr></table></figure>\n\n<p>安装完成后可以新建一个容器测试一下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker run -it --name test_nvidia_docker --gpus all nvidia/cuda:11.1-base</span><br></pre></td></tr></table></figure>\n\n<p>其中最后的参数<code>nvidia/cuda:11.1-base</code> 是 Nvidia 官方的镜像，需要根据工作站主机中实际安装的 cuda 版本进行修改，版本可以用<code>nvcc -V</code>查看。</p>\n<p>进入容器之后可以跑一下<code>nvidia-smi</code>命令看看：</p>\n<p><img src=\"https://vegetabhlimg.netlify.app/img/v2-8fde5b9337783ded35eb9ed05bb6871a_r.jpg\"></p>\n<p>现在可以在 docker 里面正常使用 GPU 啦~</p>\n<h3 id=\"3-6-测试\"><a href=\"#3-6-测试\" class=\"headerlink\" title=\"3.6 测试\"></a><strong>3.6 测试</strong></h3><p>这里通过一个简单的 python 脚本测试一下 GPU 训练是否一切正常，跑一个 DL 里面的 Hello World 程序，通过两种方法测试：本地 conda 和 docker 虚拟机。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>以后的开发过程中一般还是使用 Docker 的方式来进行更为优雅。</p></blockquote>\n<h3 id=\"1-本地-Conda-环境方式：\"><a href=\"#1-本地-Conda-环境方式：\" class=\"headerlink\" title=\"1. 本地 Conda 环境方式：\"></a><strong>1. 本地 Conda 环境方式：</strong></h3><p>先用 conda 新建一个 python3.8+pytorch1.7+cuda11.0 的虚拟环境：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda create --name python_38-pytorch_1.7.0 python=3.8</span><br></pre></td></tr></table></figure>\n\n<p>创建完成后进入环境：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda activate python_38-pytorch_1.7.0</span><br></pre></td></tr></table></figure>\n\n<p>检查一下是否切换到所需环境了：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">which pip</span><br></pre></td></tr></table></figure>\n\n<p>如果看到使用的确实是我们设置的环境目录中的 pip 的话说明就 ok。</p>\n<p>接下来在环境中安装 pytorch，可以参考官网的安装命令：<a href=\"https://pytorch.org/get-started/locally/\">Start Locally | PyTorch</a></p>\n<p><img src=\"https://vegetabhlimg.netlify.app/img/v2-81da3503ad421952832b6f9999b5886d_r.jpg\"></p>\n<p>输入以下命令进行安装：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install torch==1.7.0+cu110 torchvision==0.8.1+cu110 torchaudio===0.7.0 -f https://download.pytorch.org/whl/torch_stable.html</span><br></pre></td></tr></table></figure>\n\n<p>环境配置就完成了，下面新建一个简单的测试脚本验证功能，新建<code>mnist_train.py</code>，内容如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import torch</span><br><span class=\"line\">import torch.nn as nn</span><br><span class=\"line\">import torch.nn.functional as F</span><br><span class=\"line\">import torch.optim as optim</span><br><span class=\"line\">import torch.backends.cudnn as cudnn</span><br><span class=\"line\">from torchvision import datasets, transforms</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class Net(nn.Module):</span><br><span class=\"line\">    def __init__(self):</span><br><span class=\"line\">        super(Net, self).__init__()</span><br><span class=\"line\">        self.conv1 = nn.Conv2d(1, 10, kernel_size=5)</span><br><span class=\"line\">        self.conv2 = nn.Conv2d(10, 20, kernel_size=5)</span><br><span class=\"line\">        self.conv2_drop = nn.Dropout2d()</span><br><span class=\"line\">        self.fc1 = nn.Linear(320, 50)</span><br><span class=\"line\">        self.fc2 = nn.Linear(50, 10)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    def forward(self, x):</span><br><span class=\"line\">        x = F.relu(F.max_pool2d(self.conv1(x), 2))</span><br><span class=\"line\">        x = F.relu(F.max_pool2d(self.conv2_drop(self.conv2(x)), 2))</span><br><span class=\"line\">        x = x.view(-1, 320)</span><br><span class=\"line\">        x = F.relu(self.fc1(x))</span><br><span class=\"line\">        x = F.dropout(x, training=self.training)</span><br><span class=\"line\">        x = self.fc2(x)</span><br><span class=\"line\">        return F.log_softmax(x, dim=1)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def train(model, device, train_loader, optimizer, epoch):</span><br><span class=\"line\">    model.train()</span><br><span class=\"line\">    for batch_idx, (data, target) in enumerate(train_loader):</span><br><span class=\"line\">        data, target = data.to(device), target.to(device)</span><br><span class=\"line\">        optimizer.zero_grad()</span><br><span class=\"line\">        output = model(data)</span><br><span class=\"line\">        loss = F.nll_loss(output, target)</span><br><span class=\"line\">        loss.backward()</span><br><span class=\"line\">        optimizer.step()</span><br><span class=\"line\">        if batch_idx % 10 == 0:</span><br><span class=\"line\">            print(&#x27;Train Epoch: &#123;&#125; [&#123;&#125;/&#123;&#125; (&#123;:.0f&#125;%)]\\tLoss: &#123;:.6f&#125;&#x27;.format(</span><br><span class=\"line\">                epoch, batch_idx * len(data), len(train_loader.dataset),</span><br><span class=\"line\">                       100. * batch_idx / len(train_loader), loss.item()))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def main():</span><br><span class=\"line\">    cudnn.benchmark = True</span><br><span class=\"line\">    torch.manual_seed(1)</span><br><span class=\"line\">    device = torch.device(&quot;cuda&quot;) if torch.cuda.is_available() else torch.device(&quot;cpu&quot;)</span><br><span class=\"line\">    print(&quot;Using device: &#123;&#125;&quot;.format(device))</span><br><span class=\"line\">    kwargs = &#123;&#x27;num_workers&#x27;: 1, &#x27;pin_memory&#x27;: True&#125;</span><br><span class=\"line\">    train_loader = torch.utils.data.DataLoader(</span><br><span class=\"line\">        datasets.MNIST(&#x27;./data&#x27;, train=True, download=True,</span><br><span class=\"line\">                       transform=transforms.Compose([</span><br><span class=\"line\">                           transforms.ToTensor(),</span><br><span class=\"line\">                           transforms.Normalize((0.1307,), (0.3081,))</span><br><span class=\"line\">                       ])),</span><br><span class=\"line\">        batch_size=64, shuffle=True, **kwargs)</span><br><span class=\"line\"></span><br><span class=\"line\">    model = Net().to(device)</span><br><span class=\"line\">    optimizer = optim.SGD(model.parameters(), lr=0.01, momentum=0.5)</span><br><span class=\"line\"></span><br><span class=\"line\">    for epoch in range(1, 11):</span><br><span class=\"line\">        train(model, device, train_loader, optimizer, epoch)</span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ == &#x27;__main__&#x27;:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n\n<p>运行脚本，正常的话就可以看到训练输出了：</p>\n<p><img src=\"https://vegetabhlimg.netlify.app/img/v2-4111a218ec25aa02b11a05dca561fcd6_r.jpg\"></p>\n<h3 id=\"2-Docker-环境方式：\"><a href=\"#2-Docker-环境方式：\" class=\"headerlink\" title=\"2. Docker 环境方式：\"></a><strong>2. Docker 环境方式：</strong></h3><p>首先还是新建一个 Docker 镜像，运行下面的命令：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker run  -it  --name train_mnist \\</span><br><span class=\"line\"> -v /etc/timezone:/etc/timezone \\</span><br><span class=\"line\"> -v /etc/localtime:/etc/localtime \\</span><br><span class=\"line\"> -v /home/pengzhihui/WorkSpace/_share:/home/workspace/_share  \\</span><br><span class=\"line\"> --gpus all nvidia/cuda:11.1-base</span><br></pre></td></tr></table></figure>\n\n<p>就进入到了带 gpu 的 ubuntu20.04 容器中，效果可以参考文章开头的视频。按照前面的配置方法同样配置好 pytorch 和其他软件包，然后运行同样的脚本，也可以得到上述输出，说明 gpu 在 docker 中正常工作。</p>\n<h2 id=\"4-工作站维护篇\"><a href=\"#4-工作站维护篇\" class=\"headerlink\" title=\"4. 工作站维护篇\"></a><strong>4. 工作站维护篇</strong></h2><h3 id=\"4-1-工作站系统备份还原\"><a href=\"#4-1-工作站系统备份还原\" class=\"headerlink\" title=\"4.1 工作站系统备份还原\"></a><strong>4.1 工作站系统备份还原</strong></h3><ol>\n<li><strong>备份</strong></li>\n</ol>\n<p>由于 Linux 本身万物皆文件的设计理念，加上 root 用户对几乎全部的系统文件都有访问和更改的权限，因此 Linux 系统的备份和还原其实非常简单，我们直接打包整个根文件系统就可以了。</p>\n<p>我们可以使用 tar 命令来打包并压缩文件系统，不过这里在打包的过程中需要排除一些不需要文件，或者与新系统文件冲突的文件，包括<code>/tmp</code>、<code>/proc</code>、<code>/lost+found</code> 等目录。</p>\n<p>找一个你想保存备份文件的目录，运行下面的命令：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -cvpzf ubuntu_backup@`date +%Y-%m+%d`.tar.gz --exclude=/proc --exclude=/tmp --exclude=/boot  --exclude=/lost+found --exclude=/media --exclude=/mnt --exclude=/run /</span><br></pre></td></tr></table></figure>\n\n<p>我们会得到一个名为<code>backup.tgz</code>的压缩文件，这个文件包含我们需要备份的系统的全部内容。</p>\n<p><strong>2. 还原</strong></p>\n<p>如果系统没有出问题可以正常启动的话，那直接在刚刚的压缩包找找到想还原的文件替换就好了。而如果系统无法启动了，或者说想换一块硬盘克隆一样的系统，那么可以按一下步骤操作：</p>\n<ul>\n<li>重装干净的 Ubuntu 系统。跟上面介绍的一样，使用 U 盘给目标磁盘重装一个干净的系统，这一步是为了省去自己分配存储空间和挂载的麻烦，如果你会自己配置的话那也可以不做这一步。</li>\n<li>再次使用 U 盘进入系统，这次选择<code>try ubuntu without installing</code>，然后可以看到挂载好的刚刚安装了干净系统的另一个盘，我们在这里对盘里的根文件系统进行一些文件的提取：</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo su</span><br><span class=\"line\"></span><br><span class=\"line\"># 在tryUbuntu根目录下有media文件夹，里面是U盘文件夹和新安装的系统文件夹，在在里分别用（U盘）和（UBUNTU）表示</span><br><span class=\"line\">cd /media/（U盘）</span><br><span class=\"line\">mount -o remount rw ./</span><br><span class=\"line\"> ​</span><br><span class=\"line\"># 将新系统根目录下/boot/grub/grub.cfg文件备份到U盘中</span><br><span class=\"line\">sudo cp /media/(Ubuntu)/boot/grub/grub.cfg ./    </span><br><span class=\"line\"> ​</span><br><span class=\"line\"># 将新系统根目录下/etc/fstab文件备份到U盘中，fstab是与系统开机挂载有关的文件，grub.cfg是与开机引导有关的文件，所以这一步至关重要</span><br><span class=\"line\">sudo cp /media/(UBUNTU)/etc/fstab ./</span><br><span class=\"line\"> ​</span><br><span class=\"line\"># 这一步删除新装ubuntu全部的系统文件，有用的fstab及grub.cfg已经备份</span><br><span class=\"line\">cd /media/(UBUNTU)</span><br><span class=\"line\">sudo rm -rf ./*</span><br><span class=\"line\"> ​</span><br><span class=\"line\"># 将U盘中backup.tgz复制到该目录下并解压缩</span><br><span class=\"line\">cp /media/(U盘)/backup.tgz ./</span><br><span class=\"line\">sudo tar xvpfz backup.tgz ./</span><br><span class=\"line\"> ​</span><br><span class=\"line\"># 创建打包系统时排除的文件</span><br><span class=\"line\">sudo mkdir proc lost+found mnt sys media</span><br></pre></td></tr></table></figure>\n\n<p>这一步完成后，在用我们在新系统中备份的<code>fatab</code>及<code>grub.cfg</code> 文件去替换压缩包中解压出来的同名文件，<code>sudo reboot</code>重启后就发现系统已经恢复到备份时的状态，包括各种框架，环境，系统设置~</p>\n<h2 id=\"以上，后面有更新的话还会继续补充，希望对大家有帮助\"><a href=\"#以上，后面有更新的话还会继续补充，希望对大家有帮助\" class=\"headerlink\" title=\"以上，后面有更新的话还会继续补充，希望对大家有帮助~\"></a>以上，后面有更新的话还会继续补充，希望对大家有帮助~</h2>","feature":true,"text":"1. 个人深度学习工作站详情从第二章开始 2. 系统篇系统选择 DL 开发里面最常用的 Ubuntu，最新的稳定版本是 20.04，安装过程需要准备一个 U 盘...","permalink":"/post/个人深度学习工作站配置","photos":[],"count_time":{"symbolsCount":"16k","symbolsTime":"14 mins."},"categories":[{"name":"Python","slug":"Python","count":3,"path":"api/categories/Python.json"},{"name":"deep learning","slug":"Python/deep-learning","count":3,"path":"api/categories/Python/deep-learning.json"},{"name":"操作系统","slug":"Python/deep-learning/操作系统","count":1,"path":"api/categories/Python/deep-learning/操作系统.json"},{"name":"环境配置","slug":"Python/deep-learning/操作系统/环境配置","count":1,"path":"api/categories/Python/deep-learning/操作系统/环境配置.json"},{"name":"docker","slug":"Python/deep-learning/操作系统/环境配置/docker","count":1,"path":"api/categories/Python/deep-learning/操作系统/环境配置/docker.json"}],"tags":[{"name":"Python","slug":"Python","count":6,"path":"api/tags/Python.json"},{"name":"deep learning","slug":"deep-learning","count":4,"path":"api/tags/deep-learning.json"},{"name":"操作系统","slug":"操作系统","count":3,"path":"api/tags/操作系统.json"},{"name":"环境配置","slug":"环境配置","count":5,"path":"api/tags/环境配置.json"},{"name":"docker","slug":"docker","count":4,"path":"api/tags/docker.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-%E4%B8%AA%E4%BA%BA%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%B7%A5%E4%BD%9C%E7%AB%99\"><span class=\"toc-text\">1. 个人深度学习工作站</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-%E7%B3%BB%E7%BB%9F%E7%AF%87\"><span class=\"toc-text\">2. 系统篇</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-1-%E5%AE%89%E8%A3%85-Ubuntu-20-04-%E7%B3%BB%E7%BB%9F\"><span class=\"toc-text\">2.1 安装 Ubuntu 20.04 系统</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-2-%E9%85%8D%E7%BD%AE%E5%9B%BD%E5%86%85%E9%95%9C%E5%83%8F%E8%BD%AF%E4%BB%B6%E6%BA%90\"><span class=\"toc-text\">2.2 配置国内镜像软件源</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-3-%E5%AE%89%E8%A3%85-Python-%E5%92%8C-pip\"><span class=\"toc-text\">2.3 安装 Python 和 pip</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-4-%E9%85%8D%E7%BD%AE-SSH-%E8%BF%9C%E7%A8%8B%E6%A1%8C%E9%9D%A2\"><span class=\"toc-text\">2.4 配置 SSH &amp; 远程桌面</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-5-%E5%AE%89%E8%A3%85-frp-%E8%BF%9B%E8%A1%8C%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F\"><span class=\"toc-text\">2.5 安装 frp 进行内网穿透</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-6-%E5%AE%89%E8%A3%85-SAMBA-%E6%9C%8D%E5%8A%A1\"><span class=\"toc-text\">2.6 安装 SAMBA 服务</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-DL-%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E7%AF%87\"><span class=\"toc-text\">3. DL 开发环境配置篇</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-1-%E5%AE%89%E8%A3%85-Nvidia-%E6%98%BE%E5%8D%A1%E9%A9%B1%E5%8A%A8\"><span class=\"toc-text\">3.1 安装 Nvidia 显卡驱动</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-2-%E5%AE%89%E8%A3%85-CUDA\"><span class=\"toc-text\">3.2 安装 CUDA</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-3-%E5%AE%89%E8%A3%85-CuDNN\"><span class=\"toc-text\">3.3 安装 CuDNN</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-4-%E5%AE%89%E8%A3%85-Conda-%E7%8E%AF%E5%A2%83\"><span class=\"toc-text\">3.4 安装 Conda 环境</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-5-%E5%AE%89%E8%A3%85-Nvidia-Docker\"><span class=\"toc-text\">3.5 安装 Nvidia-Docker</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-6-%E6%B5%8B%E8%AF%95\"><span class=\"toc-text\">3.6 测试</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E6%9C%AC%E5%9C%B0-Conda-%E7%8E%AF%E5%A2%83%E6%96%B9%E5%BC%8F%EF%BC%9A\"><span class=\"toc-text\">1. 本地 Conda 环境方式：</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-Docker-%E7%8E%AF%E5%A2%83%E6%96%B9%E5%BC%8F%EF%BC%9A\"><span class=\"toc-text\">2. Docker 环境方式：</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-%E5%B7%A5%E4%BD%9C%E7%AB%99%E7%BB%B4%E6%8A%A4%E7%AF%87\"><span class=\"toc-text\">4. 工作站维护篇</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-1-%E5%B7%A5%E4%BD%9C%E7%AB%99%E7%B3%BB%E7%BB%9F%E5%A4%87%E4%BB%BD%E8%BF%98%E5%8E%9F\"><span class=\"toc-text\">4.1 工作站系统备份还原</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BB%A5%E4%B8%8A%EF%BC%8C%E5%90%8E%E9%9D%A2%E6%9C%89%E6%9B%B4%E6%96%B0%E7%9A%84%E8%AF%9D%E8%BF%98%E4%BC%9A%E7%BB%A7%E7%BB%AD%E8%A1%A5%E5%85%85%EF%BC%8C%E5%B8%8C%E6%9C%9B%E5%AF%B9%E5%A4%A7%E5%AE%B6%E6%9C%89%E5%B8%AE%E5%8A%A9\"><span class=\"toc-text\">以上，后面有更新的话还会继续补充，希望对大家有帮助~</span></a></li></ol>","author":{"name":"Vegetabhl","slug":"blog-author","avatar":"https://raw.githubusercontent.com/Vegetabhl/Images/master/img/avatar_1.jpg","link":"/","description":"--欢迎来到小卜同学的小破站--     Welcome to Xiaobu’s little website","socials":{"github":"https://github.com/Vegetabhl","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/398361872"},"wechat":{"icon":"/svg/wx.svg","link":"https://raw.githubusercontent.com/Vegetabhl/Images/master/img/wx.jpg"}}}},"mapped":true,"hidden":false,"prev_post":{"title":"如果让我来设计网络","uid":"aa9f0512d6daaaffe3d2e865e38ea95e","slug":"如果让你来设计网络","date":"2024-02-01T16:03:42.191Z","updated":"2024-05-29T15:23:31.370Z","comments":true,"path":"api/articles/如果让你来设计网络.json","keywords":null,"cover":"https://vegetabhlimg.netlify.app/img/08ef18b82e77477c9b8fdf5eb4565f09_2.png","text":"你是****一台电脑，你的名字叫 A 很久很久之前，你不与任何其他电脑相连接，孤苦伶仃。 直到有一天，你希望与另一台电脑 B 建立通信，于是你们各开了一个网口，...","permalink":"/post/如果让你来设计网络","photos":[],"count_time":{"symbolsCount":"8.6k","symbolsTime":"8 mins."},"categories":[{"name":"工作","slug":"工作","count":9,"path":"api/categories/工作.json"},{"name":"网络","slug":"工作/网络","count":2,"path":"api/categories/工作/网络.json"}],"tags":[{"name":"工作","slug":"工作","count":8,"path":"api/tags/工作.json"},{"name":"网络","slug":"网络","count":6,"path":"api/tags/网络.json"}],"author":{"name":"Vegetabhl","slug":"blog-author","avatar":"https://raw.githubusercontent.com/Vegetabhl/Images/master/img/avatar_1.jpg","link":"/","description":"--欢迎来到小卜同学的小破站--     Welcome to Xiaobu’s little website","socials":{"github":"https://github.com/Vegetabhl","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/398361872"},"wechat":{"icon":"/svg/wx.svg","link":"https://raw.githubusercontent.com/Vegetabhl/Images/master/img/wx.jpg"}}}},"feature":true},"next_post":{"title":"docker","uid":"4122a09df2e4f3d18921791a0dcc0507","slug":"docker","date":"2021-12-08T08:51:52.984Z","updated":"2024-12-23T14:39:21.377Z","comments":true,"path":"api/articles/docker.json","keywords":null,"cover":"https://vegetabhlimg.netlify.app/img/6f67e43f87f14bb0b2dbafc6b6b844d1_1.png","text":"0 参考12345678910111213141516171819查找镜像：docker search xxx 查看镜像：docker images 看终止状态...","permalink":"/post/docker","photos":[],"count_time":{"symbolsCount":"5.2k","symbolsTime":"5 mins."},"categories":[{"name":"网络","slug":"网络","count":2,"path":"api/categories/网络.json"},{"name":"常用工具","slug":"网络/常用工具","count":2,"path":"api/categories/网络/常用工具.json"},{"name":"项目","slug":"网络/常用工具/项目","count":2,"path":"api/categories/网络/常用工具/项目.json"},{"name":"环境配置","slug":"网络/常用工具/项目/环境配置","count":2,"path":"api/categories/网络/常用工具/项目/环境配置.json"},{"name":"docker","slug":"网络/常用工具/项目/环境配置/docker","count":1,"path":"api/categories/网络/常用工具/项目/环境配置/docker.json"}],"tags":[{"name":"网络","slug":"网络","count":6,"path":"api/tags/网络.json"},{"name":"常用工具","slug":"常用工具","count":6,"path":"api/tags/常用工具.json"},{"name":"项目","slug":"项目","count":6,"path":"api/tags/项目.json"},{"name":"环境配置","slug":"环境配置","count":5,"path":"api/tags/环境配置.json"},{"name":"docker","slug":"docker","count":4,"path":"api/tags/docker.json"}],"author":{"name":"Vegetabhl","slug":"blog-author","avatar":"https://raw.githubusercontent.com/Vegetabhl/Images/master/img/avatar_1.jpg","link":"/","description":"--欢迎来到小卜同学的小破站--     Welcome to Xiaobu’s little website","socials":{"github":"https://github.com/Vegetabhl","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/398361872"},"wechat":{"icon":"/svg/wx.svg","link":"https://raw.githubusercontent.com/Vegetabhl/Images/master/img/wx.jpg"}}}},"feature":true}}